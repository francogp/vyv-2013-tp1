package randoop;

import junit.framework.*;

@SuppressWarnings("unused")
public class RandoopTest28 extends TestCase {
    
    public static boolean debug = false;
    
    public void test1() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test1");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var8 = var7.isEmpty();
        boolean var9 = var7.isEmpty();
        var7.removeAll();
        var7.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        boolean var23 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.removeAll();
        var29.removeAll();
        var25.add(0, (java.lang.Object) var29);
        var29.removeAll();
        var16.add(0, (java.lang.Object) var29);
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        boolean var39 = var37.isEmpty();
        var37.removeAll();
        int var41 = var37.size();
        boolean var42 = var37.isEmpty();
        var29.add(0, (java.lang.Object) var37);
        int var44 = var29.size();
        var7.add(0, (java.lang.Object) var29);
        var29.removeAll();
        var0.add(0, (java.lang.Object) var29);
        ar.verificacion.validacion.treelistimplementation.TreeList var49 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var50 = var49.size();
        boolean var51 = var49.isEmpty();
        var49.removeAll();
        var49.removeAll();
        var49.removeAll();
        var49.removeAll();
        int var56 = var49.size();
        int var57 = var49.size();
        var0.add(0, (java.lang.Object) var57);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
    }
    
    public void test2() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test2");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        int var13 = var0.size();
        var0.removeAll();
        int var15 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test3() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test3");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.remove(0);
        var0.removeAll();
        int var10 = var0.size();
        int var11 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var15 = var0.size();
        int var16 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var18 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
    }
    
    public void test4() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test4");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var12 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
    }
    
    public void test5() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test5");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        int var13 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        var15.removeAll();
        int var19 = var15.size();
        boolean var20 = var15.isEmpty();
        boolean var21 = var15.isEmpty();
        int var22 = var15.size();
        boolean var23 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        java.lang.Object var27 = var0.get(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);
        
    }
    
    public void test6() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test6");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        int var32 = var16.size();
        boolean var33 = var16.isEmpty();
        int var34 = var16.size();
        int var35 = var16.size();
        var16.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var16);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
    }
    
    public void test7() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test7");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        var0.removeAll();
        int var17 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test8() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test8");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        var9.removeAll();
        int var14 = var9.size();
        boolean var15 = var9.isEmpty();
        var9.removeAll();
        var0.add(0, (java.lang.Object) var9);
        int var18 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var20 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
    }
    
    public void test9() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test9");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        int var11 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        var17.add(0, (java.lang.Object) (-1.0d));
        boolean var24 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.removeAll();
        var30.removeAll();
        var26.add(0, (java.lang.Object) var30);
        var30.removeAll();
        var17.add(0, (java.lang.Object) var30);
        java.lang.Object var38 = var17.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var44 = var43.size();
        boolean var45 = var43.isEmpty();
        var40.add(0, (java.lang.Object) var43);
        var40.removeAll();
        var40.removeAll();
        int var49 = var40.size();
        boolean var50 = var40.isEmpty();
        var17.add(2, (java.lang.Object) var50);
        var17.remove(1);
        java.lang.Object var55 = var17.get(1);
        boolean var56 = var17.isEmpty();
        int var57 = var17.size();
        var17.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(2, (java.lang.Object) var17);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var55 + "' != '" + true + "'", var55.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 2);
        
    }
    
    public void test10() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test10");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        boolean var23 = var20.isEmpty();
        boolean var24 = var20.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        var16.removeAll();
        var16.removeAll();
        int var28 = var16.size();
        boolean var29 = var16.isEmpty();
        var16.removeAll();
        boolean var31 = var16.isEmpty();
        var16.removeAll();
        int var33 = var16.size();
        int var34 = var16.size();
        int var35 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        var38.add(0, (java.lang.Object) var41);
        var41.add(0, (java.lang.Object) (-1.0d));
        boolean var48 = var41.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var50.removeAll();
        boolean var52 = var50.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var54 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var55 = var54.size();
        var54.removeAll();
        var54.removeAll();
        var50.add(0, (java.lang.Object) var54);
        var54.removeAll();
        var41.add(0, (java.lang.Object) var54);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var16.add((-1), (java.lang.Object) var41);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
    }
    
    public void test11() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test11");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        var6.add(0, (java.lang.Object) var9);
        var9.add(0, (java.lang.Object) (-1.0d));
        boolean var16 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var18.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var9.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        int var34 = var30.size();
        boolean var35 = var30.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        int var37 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        boolean var39 = var22.isEmpty();
        int var40 = var22.size();
        int var41 = var22.size();
        int var42 = var22.size();
        int var43 = var22.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var46 = var45.size();
        var45.add(0, (java.lang.Object) 100L);
        int var50 = var45.size();
        boolean var51 = var45.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var54 = var53.size();
        boolean var55 = var53.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var57 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var58 = var57.size();
        boolean var59 = var57.isEmpty();
        boolean var60 = var57.isEmpty();
        boolean var61 = var57.isEmpty();
        var53.add(0, (java.lang.Object) var61);
        boolean var63 = var53.isEmpty();
        var53.removeAll();
        boolean var65 = var53.isEmpty();
        var45.add(1, (java.lang.Object) var53);
        var53.removeAll();
        var53.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var22.add(10, (java.lang.Object) var53);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
    }
    
    public void test12() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test12");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.removeAll();
        var20.removeAll();
        var16.add(0, (java.lang.Object) var20);
        boolean var25 = var16.isEmpty();
        boolean var26 = var16.isEmpty();
        var16.removeAll();
        boolean var28 = var16.isEmpty();
        boolean var29 = var16.isEmpty();
        var16.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(5, (java.lang.Object) var16);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
    }
    
    public void test13() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test13");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var5 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        int var10 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
    }
    
    public void test14() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test14");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var11 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var14 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.removeAll();
        var20.removeAll();
        var16.add(0, (java.lang.Object) var20);
        var16.remove(0);
        int var27 = var16.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var27);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
    }
    
    public void test15() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test15");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        int var5 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        var7.add(0, (java.lang.Object) var10);
        var10.add(0, (java.lang.Object) (-1.0d));
        var10.removeAll();
        boolean var18 = var10.isEmpty();
        int var19 = var10.size();
        boolean var20 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var23 = var22.isEmpty();
        var22.removeAll();
        var10.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var22.removeAll();
        var0.add(0, (java.lang.Object) var22);
        var22.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var31 = var22.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
    }
    
    public void test16() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test16");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var10 = var0.size();
        var0.removeAll();
        int var12 = var0.size();
        int var13 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test17() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test17");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        var6.add(0, (java.lang.Object) var9);
        var9.add(0, (java.lang.Object) (-1.0d));
        boolean var16 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var18.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var9.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        int var34 = var30.size();
        boolean var35 = var30.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        int var37 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        int var39 = var0.size();
        int var40 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var43 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
    }
    
    public void test18() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test18");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        boolean var15 = var3.isEmpty();
        boolean var16 = var3.isEmpty();
        var3.removeAll();
        boolean var18 = var3.isEmpty();
        var3.removeAll();
        var3.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
    }
    
    public void test19() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test19");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        var8.removeAll();
        var8.removeAll();
        int var13 = var8.size();
        var8.removeAll();
        var8.removeAll();
        boolean var16 = var8.isEmpty();
        var0.add(0, (java.lang.Object) var16);
        boolean var18 = var0.isEmpty();
        int var19 = var0.size();
        var0.removeAll();
        boolean var21 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var23 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
    }
    
    public void test20() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test20");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var11.removeAll();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        var15.removeAll();
        var15.removeAll();
        var11.add(0, (java.lang.Object) var15);
        boolean var20 = var11.isEmpty();
        boolean var21 = var11.isEmpty();
        var3.add(1, (java.lang.Object) var21);
        var3.removeAll();
        var0.add(0, (java.lang.Object) var3);
        java.lang.Object var26 = var0.get(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var28 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);
        
    }
    
    public void test21() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test21");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        var6.add(0, (java.lang.Object) var9);
        var9.add(0, (java.lang.Object) (-1.0d));
        boolean var16 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var18.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var9.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        int var34 = var30.size();
        boolean var35 = var30.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        int var37 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var41 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
    }
    
    public void test22() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test22");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var14.removeAll();
        boolean var16 = var14.isEmpty();
        int var17 = var14.size();
        boolean var18 = var14.isEmpty();
        int var19 = var14.size();
        var14.removeAll();
        var14.removeAll();
        var14.removeAll();
        var0.add(0, (java.lang.Object) var14);
        int var24 = var0.size();
        int var25 = var0.size();
        boolean var26 = var0.isEmpty();
        boolean var27 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);
        
    }
    
    public void test23() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test23");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var11 = var0.size();
        int var12 = var0.size();
        int var13 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test24() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test24");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        var9.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        var17.add(0, (java.lang.Object) var20);
        var20.add(0, (java.lang.Object) (-1.0d));
        var20.removeAll();
        boolean var28 = var20.isEmpty();
        int var29 = var20.size();
        boolean var30 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var33 = var32.isEmpty();
        var32.removeAll();
        var20.add(0, (java.lang.Object) var32);
        var32.removeAll();
        var9.add(0, (java.lang.Object) var32);
        var0.add(1, (java.lang.Object) var9);
        int var39 = var9.size();
        var9.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var9.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 2);
        
    }
    
    public void test25() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test25");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var12 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
    }
    
    public void test26() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test26");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var6 = var5.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        var5.add(0, (java.lang.Object) var8);
        var8.add(0, (java.lang.Object) (-1.0d));
        var8.removeAll();
        boolean var16 = var8.isEmpty();
        int var17 = var8.size();
        boolean var18 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var21 = var20.isEmpty();
        var20.removeAll();
        var8.add(0, (java.lang.Object) var20);
        var8.removeAll();
        int var25 = var8.size();
        boolean var26 = var8.isEmpty();
        int var27 = var8.size();
        var0.add(0, (java.lang.Object) var8);
        boolean var29 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var31 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
    }
    
    public void test27() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test27");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        boolean var20 = var10.isEmpty();
        var10.removeAll();
        boolean var22 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var24.removeAll();
        boolean var26 = var24.isEmpty();
        int var27 = var24.size();
        var24.removeAll();
        boolean var29 = var24.isEmpty();
        boolean var30 = var24.isEmpty();
        boolean var31 = var24.isEmpty();
        boolean var32 = var24.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        boolean var39 = var37.isEmpty();
        var34.add(0, (java.lang.Object) var37);
        var37.add(0, (java.lang.Object) (-1.0d));
        boolean var44 = var37.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.removeAll();
        var50.removeAll();
        var46.add(0, (java.lang.Object) var50);
        var50.removeAll();
        var37.add(0, (java.lang.Object) var50);
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var59 = var58.size();
        boolean var60 = var58.isEmpty();
        var58.removeAll();
        int var62 = var58.size();
        boolean var63 = var58.isEmpty();
        var50.add(0, (java.lang.Object) var58);
        int var65 = var50.size();
        boolean var66 = var50.isEmpty();
        var24.add(0, (java.lang.Object) var50);
        int var68 = var50.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var70 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var71 = var70.size();
        var70.add(0, (java.lang.Object) 100L);
        int var75 = var70.size();
        int var76 = var70.size();
        var70.removeAll();
        int var78 = var70.size();
        var70.add(0, (java.lang.Object) 2);
        int var82 = var70.size();
        var70.removeAll();
        var50.add(1, (java.lang.Object) var70);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var10.add(5, (java.lang.Object) var50);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var78 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == 1);
        
    }
    
    public void test28() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test28");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var19 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
    }
    
    public void test29() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test29");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        var5.removeAll();
        boolean var9 = var5.isEmpty();
        var0.add(0, (java.lang.Object) var9);
        int var11 = var0.size();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        int var16 = var0.size();
        boolean var17 = var0.isEmpty();
        boolean var18 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
    }
    
    public void test30() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test30");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        boolean var20 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        boolean var28 = var26.isEmpty();
        boolean var29 = var26.isEmpty();
        boolean var30 = var26.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        boolean var32 = var22.isEmpty();
        var22.removeAll();
        boolean var34 = var22.isEmpty();
        var14.add(1, (java.lang.Object) var22);
        var0.add(1, (java.lang.Object) 1);
        boolean var37 = var0.isEmpty();
        boolean var38 = var0.isEmpty();
        int var39 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        var41.add(0, (java.lang.Object) 100L);
        int var46 = var41.size();
        var41.remove(0);
        boolean var49 = var41.isEmpty();
        int var50 = var41.size();
        var0.add(1, (java.lang.Object) var50);
        var0.removeAll();
        int var53 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
    }
    
    public void test31() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test31");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        java.lang.Object var14 = var0.get(0);
        java.lang.Object var16 = var0.get(0);
        int var17 = var0.size();
        boolean var18 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        var20.add(0, (java.lang.Object) var23);
        var20.removeAll();
        var20.removeAll();
        var20.removeAll();
        boolean var30 = var20.isEmpty();
        int var31 = var20.size();
        int var32 = var20.size();
        int var33 = var20.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var33);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + true + "'", var14.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var16 + "' != '" + true + "'", var16.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
    }
    
    public void test32() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test32");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        int var14 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        var16.removeAll();
        boolean var21 = var16.isEmpty();
        boolean var22 = var16.isEmpty();
        int var23 = var16.size();
        var16.removeAll();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        int var27 = var16.size();
        boolean var28 = var16.isEmpty();
        var0.add(0, (java.lang.Object) var28);
        int var30 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
    }
    
    public void test33() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test33");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.remove(0);
        int var16 = var0.size();
        var0.removeAll();
        int var18 = var0.size();
        boolean var19 = var0.isEmpty();
        var0.removeAll();
        boolean var21 = var0.isEmpty();
        boolean var22 = var0.isEmpty();
        var0.removeAll();
        boolean var24 = var0.isEmpty();
        int var25 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
    }
    
    public void test34() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test34");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        var15.removeAll();
        int var20 = var15.size();
        var15.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var15.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
    }
    
    public void test35() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test35");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var16.isEmpty();
        boolean var29 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var32 = var31.isEmpty();
        var31.removeAll();
        boolean var34 = var31.isEmpty();
        var31.removeAll();
        boolean var36 = var31.isEmpty();
        var31.removeAll();
        boolean var38 = var31.isEmpty();
        var31.removeAll();
        boolean var40 = var31.isEmpty();
        boolean var41 = var31.isEmpty();
        int var42 = var31.size();
        var31.removeAll();
        var31.removeAll();
        var31.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var16.add(2, (java.lang.Object) var31);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
    }
    
    public void test36() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test36");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        var0.removeAll();
        int var10 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var13 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
    }
    
    public void test37() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test37");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        java.lang.Object var25 = var0.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        int var34 = var27.size();
        int var35 = var27.size();
        var27.removeAll();
        var0.add(2, (java.lang.Object) var27);
        int var38 = var0.size();
        boolean var39 = var0.isEmpty();
        int var40 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + 100L + "'", var25.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 4);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 4);
        
    }
    
    public void test38() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test38");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        boolean var15 = var0.isEmpty();
        boolean var16 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
    }
    
    public void test39() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test39");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var12 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
    }
    
    public void test40() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test40");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        int var13 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        var15.removeAll();
        var15.removeAll();
        var15.removeAll();
        var15.removeAll();
        var15.removeAll();
        var15.add(0, (java.lang.Object) (byte) 1);
        boolean var26 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var29 = var28.size();
        var28.add(0, (java.lang.Object) 100L);
        int var33 = var28.size();
        int var34 = var28.size();
        int var35 = var28.size();
        var28.add(1, (java.lang.Object) 1.0d);
        boolean var39 = var28.isEmpty();
        var15.add(1, (java.lang.Object) var28);
        boolean var41 = var15.isEmpty();
        var0.add(0, (java.lang.Object) var41);
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        var44.removeAll();
        var44.removeAll();
        var44.removeAll();
        boolean var50 = var44.isEmpty();
        var44.removeAll();
        boolean var52 = var44.isEmpty();
        boolean var53 = var44.isEmpty();
        int var54 = var44.size();
        var44.removeAll();
        var0.add(0, (java.lang.Object) var44);
        int var57 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 2);
        
    }
    
    public void test41() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test41");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        java.lang.Object var14 = var0.get(0);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        boolean var20 = var17.isEmpty();
        boolean var21 = var17.isEmpty();
        boolean var22 = var17.isEmpty();
        int var23 = var17.size();
        boolean var24 = var17.isEmpty();
        int var25 = var17.size();
        var0.add(0, (java.lang.Object) var17);
        boolean var27 = var0.isEmpty();
        int var28 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + 100L + "'", var9.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + 100L + "'", var14.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
    }
    
    public void test42() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test42");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        var0.removeAll();
        var0.removeAll();
        int var27 = var0.size();
        int var28 = var0.size();
        boolean var29 = var0.isEmpty();
        boolean var30 = var0.isEmpty();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
    }
    
    public void test43() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test43");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        int var20 = var3.size();
        boolean var21 = var3.isEmpty();
        boolean var22 = var3.isEmpty();
        boolean var23 = var3.isEmpty();
        var3.removeAll();
        boolean var25 = var3.isEmpty();
        int var26 = var3.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var28 = var3.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
    }
    
    public void test44() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test44");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
    }
    
    public void test45() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test45");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        boolean var19 = var16.isEmpty();
        boolean var20 = var16.isEmpty();
        var12.add(0, (java.lang.Object) var20);
        int var22 = var12.size();
        int var23 = var12.size();
        boolean var24 = var12.isEmpty();
        int var25 = var12.size();
        boolean var26 = var12.isEmpty();
        var12.removeAll();
        var0.add(0, (java.lang.Object) var12);
        var0.removeAll();
        int var30 = var0.size();
        boolean var31 = var0.isEmpty();
        boolean var32 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
    }
    
    public void test46() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test46");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var17 = var0.size();
        int var18 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.removeAll();
        int var23 = var20.size();
        boolean var24 = var20.isEmpty();
        int var25 = var20.size();
        int var26 = var20.size();
        int var27 = var20.size();
        int var28 = var20.size();
        var20.removeAll();
        var0.add(0, (java.lang.Object) var20);
        int var31 = var0.size();
        boolean var32 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
    }
    
    public void test47() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test47");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        int var16 = var0.size();
        int var17 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test48() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test48");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var11 = var3.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
    }
    
    public void test49() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test49");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var29);
        var26.removeAll();
        var26.removeAll();
        int var35 = var26.size();
        boolean var36 = var26.isEmpty();
        var3.add(2, (java.lang.Object) var36);
        var3.remove(1);
        java.lang.Object var41 = var3.get(1);
        boolean var42 = var3.isEmpty();
        int var43 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var45.removeAll();
        boolean var47 = var45.isEmpty();
        int var48 = var45.size();
        var45.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var51 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var52 = var51.size();
        boolean var53 = var51.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        boolean var57 = var55.isEmpty();
        boolean var58 = var55.isEmpty();
        boolean var59 = var55.isEmpty();
        var51.add(0, (java.lang.Object) var59);
        var45.add(0, (java.lang.Object) var51);
        int var62 = var51.size();
        var51.removeAll();
        var51.removeAll();
        var3.add(2, (java.lang.Object) var51);
        boolean var66 = var51.isEmpty();
        int var67 = var51.size();
        boolean var68 = var51.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var70 = var51.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var41 + "' != '" + true + "'", var41.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);
        
    }
    
    public void test50() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test50");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.remove(0);
        int var16 = var0.size();
        int var17 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test51() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test51");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var15 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var18 = var0.size();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
    }
    
    public void test52() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test52");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        var0.removeAll();
        var0.removeAll();
        int var27 = var0.size();
        int var28 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        boolean var33 = var31.isEmpty();
        boolean var34 = var31.isEmpty();
        boolean var35 = var31.isEmpty();
        var31.removeAll();
        int var37 = var31.size();
        var31.removeAll();
        var31.removeAll();
        int var40 = var31.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var40);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
    }
    
    public void test53() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test53");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        boolean var11 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.add(1, (java.lang.Object) 1.0d);
        boolean var24 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        int var26 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var29 = var28.size();
        var28.add(0, (java.lang.Object) 100L);
        int var33 = var28.size();
        boolean var34 = var28.isEmpty();
        boolean var35 = var28.isEmpty();
        int var36 = var28.size();
        var28.remove(0);
        var28.removeAll();
        var28.removeAll();
        boolean var41 = var28.isEmpty();
        var0.add(1, (java.lang.Object) var28);
        boolean var43 = var28.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
    }
    
    public void test54() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test54");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        var18.add(0, (java.lang.Object) 100L);
        int var23 = var18.size();
        boolean var24 = var18.isEmpty();
        boolean var25 = var18.isEmpty();
        var18.remove(0);
        var18.removeAll();
        var6.add(1, (java.lang.Object) var18);
        int var30 = var18.size();
        boolean var31 = var18.isEmpty();
        boolean var32 = var18.isEmpty();
        var18.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var35 = var18.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
    }
    
    public void test55() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test55");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        int var8 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test56() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test56");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var36.removeAll();
        boolean var38 = var36.isEmpty();
        var5.add(2, (java.lang.Object) var36);
        var5.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var42 = var5.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
    }
    
    public void test57() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test57");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        var0.remove(0);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        int var38 = var32.size();
        int var39 = var32.size();
        var32.add(1, (java.lang.Object) 1.0d);
        var32.remove(1);
        boolean var45 = var32.isEmpty();
        boolean var46 = var32.isEmpty();
        int var47 = var32.size();
        int var48 = var32.size();
        var0.add(0, (java.lang.Object) var32);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var51 = var32.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 1);
        
    }
    
    public void test58() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test58");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        boolean var16 = var0.isEmpty();
        int var17 = var0.size();
        boolean var18 = var0.isEmpty();
        boolean var19 = var0.isEmpty();
        int var20 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
    }
    
    public void test59() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test59");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var8.add(0, (java.lang.Object) var11);
        var11.add(0, (java.lang.Object) (-1.0d));
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        int var20 = var11.size();
        boolean var21 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var24 = var23.isEmpty();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        var23.removeAll();
        var0.add(0, (java.lang.Object) var23);
        var0.remove(1);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
    }
    
    public void test60() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test60");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        var17.add(0, (java.lang.Object) (-1.0d));
        boolean var24 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.removeAll();
        var30.removeAll();
        var26.add(0, (java.lang.Object) var30);
        var30.removeAll();
        var17.add(0, (java.lang.Object) var30);
        boolean var37 = var17.isEmpty();
        var0.add(0, (java.lang.Object) var17);
        int var39 = var0.size();
        boolean var40 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
    }
    
    public void test61() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test61");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        boolean var31 = var0.isEmpty();
        var0.remove(0);
        boolean var34 = var0.isEmpty();
        boolean var35 = var0.isEmpty();
        boolean var36 = var0.isEmpty();
        boolean var37 = var0.isEmpty();
        int var38 = var0.size();
        int var39 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var42 = var41.isEmpty();
        var41.removeAll();
        int var44 = var41.size();
        var41.removeAll();
        var41.add(0, (java.lang.Object) (byte) 1);
        int var49 = var41.size();
        int var50 = var41.size();
        int var51 = var41.size();
        int var52 = var41.size();
        var0.add(1, (java.lang.Object) var41);
        var0.remove(0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
    }
    
    public void test62() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test62");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        boolean var15 = var12.isEmpty();
        boolean var16 = var12.isEmpty();
        var8.add(0, (java.lang.Object) var16);
        boolean var18 = var8.isEmpty();
        java.lang.Object var20 = var8.get(0);
        var8.remove(0);
        boolean var23 = var8.isEmpty();
        var0.add(0, (java.lang.Object) var23);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        int var29 = var26.size();
        var26.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        boolean var34 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        boolean var39 = var36.isEmpty();
        boolean var40 = var36.isEmpty();
        var32.add(0, (java.lang.Object) var40);
        var26.add(0, (java.lang.Object) var32);
        var26.removeAll();
        var26.removeAll();
        var26.removeAll();
        var0.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var48 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var49 = var48.size();
        boolean var50 = var48.isEmpty();
        var48.removeAll();
        var48.removeAll();
        var48.removeAll();
        var48.add(0, (java.lang.Object) 0L);
        int var57 = var48.size();
        var48.removeAll();
        int var59 = var48.size();
        int var60 = var48.size();
        int var61 = var48.size();
        var48.removeAll();
        int var63 = var48.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var26.add((-1), (java.lang.Object) var63);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + true + "'", var20.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
    }
    
    public void test63() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test63");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var21.add(0, (java.lang.Object) var24);
        var24.add(0, (java.lang.Object) (-1.0d));
        var24.removeAll();
        boolean var32 = var24.isEmpty();
        var24.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        var35.add(0, (java.lang.Object) 100L);
        int var40 = var35.size();
        int var41 = var35.size();
        int var42 = var35.size();
        int var43 = var35.size();
        var35.remove(0);
        int var46 = var35.size();
        int var47 = var35.size();
        var24.add(0, (java.lang.Object) var47);
        var3.add(0, (java.lang.Object) var47);
        var3.removeAll();
        boolean var51 = var3.isEmpty();
        var3.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
    }
    
    public void test64() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test64");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        int var5 = var0.size();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        int var9 = var0.size();
        int var10 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
    }
    
    public void test65() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test65");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.add(0, (java.lang.Object) 100L);
        int var31 = var26.size();
        boolean var32 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var34.removeAll();
        boolean var36 = var34.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        var38.removeAll();
        var38.removeAll();
        var34.add(0, (java.lang.Object) var38);
        boolean var43 = var34.isEmpty();
        boolean var44 = var34.isEmpty();
        var26.add(1, (java.lang.Object) var44);
        int var46 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var48 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var48.removeAll();
        boolean var50 = var48.isEmpty();
        int var51 = var48.size();
        boolean var52 = var48.isEmpty();
        int var53 = var48.size();
        boolean var54 = var48.isEmpty();
        var26.add(1, (java.lang.Object) var48);
        var3.add(1, (java.lang.Object) 1);
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var59 = var58.size();
        boolean var60 = var58.isEmpty();
        var58.removeAll();
        int var62 = var58.size();
        boolean var63 = var58.isEmpty();
        boolean var64 = var58.isEmpty();
        int var65 = var58.size();
        boolean var66 = var58.isEmpty();
        var58.add(0, (java.lang.Object) 10L);
        var58.removeAll();
        var3.add(1, (java.lang.Object) var58);
        ar.verificacion.validacion.treelistimplementation.TreeList var73 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var74 = var73.size();
        boolean var75 = var73.isEmpty();
        boolean var76 = var73.isEmpty();
        boolean var77 = var73.isEmpty();
        var73.removeAll();
        int var79 = var73.size();
        var73.removeAll();
        int var81 = var73.size();
        var73.removeAll();
        var73.removeAll();
        var73.removeAll();
        var3.add(1, (java.lang.Object) var73);
        int var86 = var3.size();
        int var87 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var81 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var86 == 5);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == 5);
        
    }
    
    public void test66() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test66");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        var0.removeAll();
        int var14 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        var16.removeAll();
        var16.removeAll();
        boolean var28 = var16.isEmpty();
        var16.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) var16);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
    }
    
    public void test67() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test67");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var15 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + 100L + "'", var9.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test68() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test68");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        var0.removeAll();
        boolean var18 = var0.isEmpty();
        int var19 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
    }
    
    public void test69() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test69");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        var19.removeAll();
        int var23 = var19.size();
        boolean var24 = var19.isEmpty();
        boolean var25 = var19.isEmpty();
        boolean var26 = var19.isEmpty();
        var6.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        var29.add(0, (java.lang.Object) var33);
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        boolean var40 = var29.isEmpty();
        var29.removeAll();
        var6.add(0, (java.lang.Object) var29);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var44 = var6.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
    }
    
    public void test70() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test70");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + (byte) 1 + "'",
                var9.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
    }
    
    public void test71() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test71");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        int var29 = var26.size();
        var26.removeAll();
        var3.add(2, (java.lang.Object) var26);
        boolean var32 = var3.isEmpty();
        boolean var33 = var3.isEmpty();
        var3.remove(2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
    }
    
    public void test72() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test72");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 100L);
        int var8 = var0.size();
        var0.removeAll();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        int var15 = var12.size();
        boolean var16 = var12.isEmpty();
        int var17 = var12.size();
        boolean var18 = var12.isEmpty();
        var0.add(0, (java.lang.Object) var12);
        var12.removeAll();
        int var21 = var12.size();
        var12.removeAll();
        var12.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.add(0, (java.lang.Object) 1L);
        boolean var32 = var25.isEmpty();
        var25.removeAll();
        int var34 = var25.size();
        int var35 = var25.size();
        boolean var36 = var25.isEmpty();
        int var37 = var25.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var12.add((-1), (java.lang.Object) var25);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
    }
    
    public void test73() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test73");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        boolean var19 = var16.isEmpty();
        boolean var20 = var16.isEmpty();
        var12.add(0, (java.lang.Object) var20);
        boolean var22 = var12.isEmpty();
        var12.removeAll();
        boolean var24 = var12.isEmpty();
        boolean var25 = var12.isEmpty();
        boolean var26 = var12.isEmpty();
        var0.add(1, (java.lang.Object) var12);
        var0.removeAll();
        int var29 = var0.size();
        boolean var30 = var0.isEmpty();
        int var31 = var0.size();
        boolean var32 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        var35.add(0, (java.lang.Object) var38);
        var38.add(0, (java.lang.Object) (-1.0d));
        var38.removeAll();
        boolean var46 = var38.isEmpty();
        int var47 = var38.size();
        boolean var48 = var38.isEmpty();
        boolean var49 = var38.isEmpty();
        boolean var50 = var38.isEmpty();
        boolean var51 = var38.isEmpty();
        boolean var52 = var38.isEmpty();
        var38.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(5, (java.lang.Object) var38);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + (byte) 1 + "'",
                var9.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
    }
    
    public void test74() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test74");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 0L);
        int var9 = var0.size();
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        int var13 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        boolean var22 = var19.isEmpty();
        boolean var23 = var19.isEmpty();
        var15.add(0, (java.lang.Object) var23);
        boolean var25 = var15.isEmpty();
        var15.removeAll();
        int var27 = var15.size();
        var15.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var30.removeAll();
        boolean var32 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        var34.removeAll();
        var34.removeAll();
        var30.add(0, (java.lang.Object) var34);
        boolean var39 = var30.isEmpty();
        boolean var40 = var30.isEmpty();
        boolean var41 = var30.isEmpty();
        var30.removeAll();
        var15.add(0, (java.lang.Object) var30);
        var30.removeAll();
        var30.removeAll();
        var30.removeAll();
        boolean var47 = var30.isEmpty();
        boolean var48 = var30.isEmpty();
        var0.add(0, (java.lang.Object) var30);
        java.lang.Object var51 = var0.get(1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var51 + "' != '" + 0L + "'", var51.equals(0L));
        
    }
    
    public void test75() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test75");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.add(0, (java.lang.Object) 100L);
        int var31 = var26.size();
        boolean var32 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var34.removeAll();
        boolean var36 = var34.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        var38.removeAll();
        var38.removeAll();
        var34.add(0, (java.lang.Object) var38);
        boolean var43 = var34.isEmpty();
        boolean var44 = var34.isEmpty();
        var26.add(1, (java.lang.Object) var44);
        int var46 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var48 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var48.removeAll();
        boolean var50 = var48.isEmpty();
        int var51 = var48.size();
        boolean var52 = var48.isEmpty();
        int var53 = var48.size();
        boolean var54 = var48.isEmpty();
        var26.add(1, (java.lang.Object) var48);
        var3.add(1, (java.lang.Object) 1);
        int var57 = var3.size();
        var3.removeAll();
        var3.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var61 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var61.removeAll();
        boolean var63 = var61.isEmpty();
        int var64 = var61.size();
        var61.add(0, (java.lang.Object) 1L);
        int var68 = var61.size();
        boolean var69 = var61.isEmpty();
        var61.removeAll();
        var61.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(1, (java.lang.Object) var61);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == false);
        
    }
    
    public void test76() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test76");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        int var20 = var3.size();
        int var21 = var3.size();
        java.lang.Object var23 = var3.get(0);
        var3.removeAll();
        int var25 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
    }
    
    public void test77() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test77");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 100L);
        int var8 = var0.size();
        var0.removeAll();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
    }
    
    public void test78() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test78");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        var0.remove(0);
        boolean var22 = var0.isEmpty();
        int var23 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.add(0, (java.lang.Object) 100L);
        int var31 = var26.size();
        boolean var32 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        boolean var41 = var38.isEmpty();
        boolean var42 = var38.isEmpty();
        var34.add(0, (java.lang.Object) var42);
        boolean var44 = var34.isEmpty();
        var34.removeAll();
        boolean var46 = var34.isEmpty();
        var26.add(1, (java.lang.Object) var34);
        boolean var48 = var34.isEmpty();
        boolean var49 = var34.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var34);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
    }
    
    public void test79() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test79");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        var0.removeAll();
        int var15 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var17.removeAll();
        boolean var19 = var17.isEmpty();
        int var20 = var17.size();
        var17.removeAll();
        boolean var22 = var17.isEmpty();
        boolean var23 = var17.isEmpty();
        int var24 = var17.size();
        var17.removeAll();
        var17.removeAll();
        boolean var27 = var17.isEmpty();
        boolean var28 = var17.isEmpty();
        int var29 = var17.size();
        int var30 = var17.size();
        int var31 = var17.size();
        var17.removeAll();
        var0.add(0, (java.lang.Object) var17);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
    }
    
    public void test80() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test80");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var7.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test81() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test81");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        var0.remove(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
    }
    
    public void test82() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test82");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        java.lang.Object var13 = var0.get(0);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var18 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + false + "'", var13.equals(false));
        
    }
    
    public void test83() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test83");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        java.lang.Object var8 = var0.get(0);
        var0.removeAll();
        var0.removeAll();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var8 + "' != '" + 100L + "'", var8.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
    }
    
    public void test84() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test84");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var8.add(0, (java.lang.Object) var11);
        var11.add(0, (java.lang.Object) (-1.0d));
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        int var20 = var11.size();
        boolean var21 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var24 = var23.isEmpty();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        var23.removeAll();
        var0.add(0, (java.lang.Object) var23);
        var0.remove(1);
        boolean var31 = var0.isEmpty();
        int var32 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var35 = var34.isEmpty();
        boolean var36 = var34.isEmpty();
        var34.removeAll();
        var34.removeAll();
        int var39 = var34.size();
        var0.add(1, (java.lang.Object) var39);
        boolean var41 = var0.isEmpty();
        int var42 = var0.size();
        var0.removeAll();
        boolean var44 = var0.isEmpty();
        boolean var45 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
    }
    
    public void test85() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test85");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        var17.add(0, (java.lang.Object) (-1.0d));
        boolean var24 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.removeAll();
        var30.removeAll();
        var26.add(0, (java.lang.Object) var30);
        var30.removeAll();
        var17.add(0, (java.lang.Object) var30);
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        var38.add(0, (java.lang.Object) 100L);
        int var43 = var38.size();
        int var44 = var38.size();
        var38.removeAll();
        int var46 = var38.size();
        var38.removeAll();
        int var48 = var38.size();
        var38.removeAll();
        var38.removeAll();
        var17.add(2, (java.lang.Object) var38);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var38);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
    }
    
    public void test86() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test86");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        boolean var28 = var3.isEmpty();
        var3.remove(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var32 = var3.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
    }
    
    public void test87() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test87");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        var11.add(0, (java.lang.Object) 100L);
        int var16 = var11.size();
        int var17 = var11.size();
        java.lang.Object var19 = var11.get(0);
        var11.removeAll();
        var11.removeAll();
        var0.add(1, (java.lang.Object) var11);
        java.lang.Object var24 = var0.get(1);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + 100L + "'", var19.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
    }
    
    public void test88() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test88");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        boolean var24 = var15.isEmpty();
        boolean var25 = var15.isEmpty();
        boolean var26 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        var15.removeAll();
        boolean var30 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        int var38 = var32.size();
        int var39 = var32.size();
        var32.add(1, (java.lang.Object) 1.0d);
        int var43 = var32.size();
        var32.remove(0);
        var15.add(0, (java.lang.Object) 0);
        int var47 = var15.size();
        var15.removeAll();
        boolean var49 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var51 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var52 = var51.size();
        int var53 = var51.size();
        boolean var54 = var51.isEmpty();
        var51.removeAll();
        boolean var56 = var51.isEmpty();
        boolean var57 = var51.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var15.add(3, (java.lang.Object) var57);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
    }
    
    public void test89() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test89");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        var0.removeAll();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        int var14 = var12.size();
        boolean var15 = var12.isEmpty();
        var12.removeAll();
        int var17 = var12.size();
        int var18 = var12.size();
        int var19 = var12.size();
        boolean var20 = var12.isEmpty();
        var0.add(0, (java.lang.Object) var12);
        var12.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var24 = var12.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
    }
    
    public void test90() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test90");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        java.lang.Object var23 = var11.get(0);
        var11.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        boolean var29 = var27.isEmpty();
        var27.removeAll();
        int var31 = var27.size();
        boolean var32 = var27.isEmpty();
        boolean var33 = var27.isEmpty();
        boolean var34 = var27.isEmpty();
        var11.add(0, (java.lang.Object) var34);
        var0.add(0, (java.lang.Object) 0);
        int var37 = var0.size();
        int var38 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var23 + "' != '" + true + "'", var23.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
    }
    
    public void test91() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test91");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        boolean var3 = var0.isEmpty();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        boolean var19 = var13.isEmpty();
        boolean var20 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var20);
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        var23.add(0, (java.lang.Object) 100L);
        int var28 = var23.size();
        int var29 = var23.size();
        int var30 = var23.size();
        var23.removeAll();
        boolean var32 = var23.isEmpty();
        boolean var33 = var23.isEmpty();
        var10.add(1, (java.lang.Object) var33);
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        var39.add(0, (java.lang.Object) 100L);
        int var44 = var39.size();
        boolean var45 = var39.isEmpty();
        boolean var46 = var39.isEmpty();
        var36.add(0, (java.lang.Object) var46);
        ar.verificacion.validacion.treelistimplementation.TreeList var49 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var50 = var49.size();
        var49.add(0, (java.lang.Object) 100L);
        int var54 = var49.size();
        int var55 = var49.size();
        int var56 = var49.size();
        var49.removeAll();
        boolean var58 = var49.isEmpty();
        boolean var59 = var49.isEmpty();
        var36.add(1, (java.lang.Object) var59);
        int var61 = var36.size();
        int var62 = var36.size();
        var10.add(0, (java.lang.Object) var62);
        int var64 = var10.size();
        var10.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(1, (java.lang.Object) var10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 3);
        
    }
    
    public void test92() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test92");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        var19.removeAll();
        int var23 = var19.size();
        boolean var24 = var19.isEmpty();
        boolean var25 = var19.isEmpty();
        boolean var26 = var19.isEmpty();
        var6.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        var29.add(0, (java.lang.Object) var33);
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        boolean var40 = var29.isEmpty();
        var29.removeAll();
        var6.add(0, (java.lang.Object) var29);
        java.lang.Object var44 = var6.get(0);
        boolean var45 = var6.isEmpty();
        boolean var46 = var6.isEmpty();
        boolean var47 = var6.isEmpty();
        var6.removeAll();
        boolean var49 = var6.isEmpty();
        int var50 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        boolean var54 = var52.isEmpty();
        boolean var55 = var52.isEmpty();
        boolean var56 = var52.isEmpty();
        var52.removeAll();
        int var58 = var52.size();
        boolean var59 = var52.isEmpty();
        var52.removeAll();
        boolean var61 = var52.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var63 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var64 = var63.size();
        boolean var65 = var63.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var67 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var68 = var67.size();
        boolean var69 = var67.isEmpty();
        boolean var70 = var67.isEmpty();
        boolean var71 = var67.isEmpty();
        var63.add(0, (java.lang.Object) var71);
        boolean var73 = var63.isEmpty();
        java.lang.Object var75 = var63.get(0);
        var63.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var79 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var80 = var79.size();
        boolean var81 = var79.isEmpty();
        var79.removeAll();
        int var83 = var79.size();
        boolean var84 = var79.isEmpty();
        boolean var85 = var79.isEmpty();
        boolean var86 = var79.isEmpty();
        var63.add(0, (java.lang.Object) var86);
        var52.add(0, (java.lang.Object) 0);
        boolean var89 = var52.isEmpty();
        int var90 = var52.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var6.add(2, (java.lang.Object) var90);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var75 + "' != '" + true + "'", var75.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var80 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var81 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var83 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var86 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var90 == 1);
        
    }
    
    public void test93() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test93");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test94() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test94");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        boolean var14 = var11.isEmpty();
        boolean var15 = var11.isEmpty();
        var11.removeAll();
        int var17 = var11.size();
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        boolean var20 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        boolean var28 = var26.isEmpty();
        boolean var29 = var26.isEmpty();
        boolean var30 = var26.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        boolean var32 = var22.isEmpty();
        var22.removeAll();
        var22.removeAll();
        var11.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var22.removeAll();
        boolean var38 = var22.isEmpty();
        var22.removeAll();
        int var40 = var22.size();
        int var41 = var22.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(2, (java.lang.Object) var22);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
    }
    
    public void test95() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test95");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        var0.removeAll();
        boolean var17 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        boolean var22 = var19.isEmpty();
        boolean var23 = var19.isEmpty();
        var19.removeAll();
        int var25 = var19.size();
        boolean var26 = var19.isEmpty();
        boolean var27 = var19.isEmpty();
        boolean var28 = var19.isEmpty();
        int var29 = var19.size();
        int var30 = var19.size();
        int var31 = var19.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var31);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
    }
    
    public void test96() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test96");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test97() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test97");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var17 = var0.size();
        int var18 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        boolean var26 = var23.isEmpty();
        boolean var27 = var23.isEmpty();
        var23.removeAll();
        boolean var29 = var23.isEmpty();
        boolean var30 = var23.isEmpty();
        var23.removeAll();
        var23.removeAll();
        boolean var33 = var23.isEmpty();
        int var34 = var23.size();
        boolean var35 = var23.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var35);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
    }
    
    public void test98() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test98");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
    }
    
    public void test99() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test99");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
    }
    
    public void test100() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test100");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        boolean var24 = var15.isEmpty();
        boolean var25 = var15.isEmpty();
        boolean var26 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        int var29 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        boolean var33 = var31.isEmpty();
        var31.removeAll();
        var31.removeAll();
        var31.removeAll();
        var31.removeAll();
        var31.removeAll();
        var31.add(0, (java.lang.Object) (byte) 1);
        boolean var42 = var31.isEmpty();
        boolean var43 = var31.isEmpty();
        var0.add(1, (java.lang.Object) var31);
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.removeAll();
        var50.removeAll();
        var46.add(0, (java.lang.Object) var50);
        ar.verificacion.validacion.treelistimplementation.TreeList var56 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var57 = var56.size();
        var56.add(0, (java.lang.Object) 100L);
        int var61 = var56.size();
        int var62 = var56.size();
        int var63 = var56.size();
        int var64 = var56.size();
        var56.remove(0);
        int var67 = var56.size();
        var56.removeAll();
        boolean var69 = var56.isEmpty();
        var50.add(0, (java.lang.Object) var56);
        var31.add(0, (java.lang.Object) var56);
        int var72 = var31.size();
        var31.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == 2);
        
    }
    
    public void test101() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test101");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        var11.add(0, (java.lang.Object) 100L);
        int var16 = var11.size();
        int var17 = var11.size();
        int var18 = var11.size();
        java.lang.Object var20 = var11.get(0);
        int var21 = var11.size();
        int var22 = var11.size();
        var11.removeAll();
        int var24 = var11.size();
        int var25 = var11.size();
        var0.add(1, (java.lang.Object) var25);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + 100L + "'", var20.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
    }
    
    public void test102() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test102");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        boolean var20 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        var26.removeAll();
        var22.add(0, (java.lang.Object) var26);
        var26.removeAll();
        var13.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        var34.removeAll();
        int var38 = var34.size();
        boolean var39 = var34.isEmpty();
        var26.add(0, (java.lang.Object) var34);
        int var41 = var26.size();
        boolean var42 = var26.isEmpty();
        var0.add(0, (java.lang.Object) var26);
        boolean var44 = var0.isEmpty();
        int var45 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var49 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
    }
    
    public void test103() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test103");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
    }
    
    public void test104() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test104");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
    }
    
    public void test105() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test105");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        int var13 = var0.size();
        int var14 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
    }
    
    public void test106() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test106");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        boolean var12 = var3.isEmpty();
        var3.removeAll();
        boolean var14 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        int var19 = var16.size();
        var16.removeAll();
        var16.add(0, (java.lang.Object) 100L);
        int var24 = var16.size();
        var16.removeAll();
        int var26 = var16.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var29 = var28.size();
        var28.removeAll();
        int var31 = var28.size();
        boolean var32 = var28.isEmpty();
        int var33 = var28.size();
        boolean var34 = var28.isEmpty();
        var16.add(0, (java.lang.Object) var28);
        var16.removeAll();
        boolean var37 = var16.isEmpty();
        int var38 = var16.size();
        int var39 = var16.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(4, (java.lang.Object) var39);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
    }
    
    public void test107() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test107");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        var18.add(0, (java.lang.Object) 100L);
        int var23 = var18.size();
        boolean var24 = var18.isEmpty();
        boolean var25 = var18.isEmpty();
        var18.remove(0);
        var18.removeAll();
        var6.add(1, (java.lang.Object) var18);
        int var30 = var18.size();
        int var31 = var18.size();
        boolean var32 = var18.isEmpty();
        boolean var33 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        var35.add(0, (java.lang.Object) var38);
        var38.add(0, (java.lang.Object) (-1.0d));
        var38.removeAll();
        boolean var46 = var38.isEmpty();
        int var47 = var38.size();
        boolean var48 = var38.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var50.removeAll();
        boolean var52 = var50.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var54 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var55 = var54.size();
        var54.removeAll();
        var54.removeAll();
        var50.add(0, (java.lang.Object) var54);
        var38.add(0, (java.lang.Object) var54);
        int var60 = var54.size();
        boolean var61 = var54.isEmpty();
        var54.removeAll();
        int var63 = var54.size();
        var54.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var18.add(5, (java.lang.Object) var54);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
    }
    
    public void test108() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test108");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test109() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test109");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 100L);
        int var8 = var0.size();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        boolean var19 = var16.isEmpty();
        boolean var20 = var16.isEmpty();
        var12.add(0, (java.lang.Object) var20);
        boolean var22 = var12.isEmpty();
        boolean var23 = var12.isEmpty();
        boolean var24 = var12.isEmpty();
        int var25 = var12.size();
        var12.remove(0);
        int var28 = var12.size();
        var12.removeAll();
        var0.add(0, (java.lang.Object) var12);
        int var31 = var0.size();
        boolean var32 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
    }
    
    public void test110() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test110");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        var4.removeAll();
        var4.removeAll();
        boolean var11 = var4.isEmpty();
        var4.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        var17.add(0, (java.lang.Object) (-1.0d));
        var17.removeAll();
        var17.removeAll();
        var4.add(0, (java.lang.Object) var17);
        var17.removeAll();
        boolean var28 = var17.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
    }
    
    public void test111() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test111");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var9 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
    }
    
    public void test112() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test112");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var17 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
    }
    
    public void test113() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test113");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        java.lang.Object var14 = var0.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        boolean var19 = var16.isEmpty();
        var16.removeAll();
        var16.removeAll();
        var0.add(1, (java.lang.Object) var16);
        boolean var23 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var27 = var26.isEmpty();
        var26.removeAll();
        boolean var29 = var26.isEmpty();
        boolean var30 = var26.isEmpty();
        int var31 = var26.size();
        var26.removeAll();
        var0.add(0, (java.lang.Object) var26);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + (byte) 1 + "'",
                var9.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + (byte) 1 + "'",
                var14.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
    }
    
    public void test114() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test114");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        boolean var3 = var0.isEmpty();
        int var4 = var0.size();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
    }
    
    public void test115() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test115");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var10 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
    }
    
    public void test116() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test116");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        var5.removeAll();
        boolean var9 = var5.isEmpty();
        var0.add(0, (java.lang.Object) var9);
        int var11 = var0.size();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        boolean var25 = var14.isEmpty();
        boolean var26 = var14.isEmpty();
        int var27 = var14.size();
        var14.remove(0);
        int var30 = var14.size();
        boolean var31 = var14.isEmpty();
        int var32 = var14.size();
        boolean var33 = var14.isEmpty();
        var0.add(1, (java.lang.Object) var14);
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        var36.add(0, (java.lang.Object) 100L);
        int var41 = var36.size();
        int var42 = var36.size();
        var36.removeAll();
        boolean var44 = var36.isEmpty();
        boolean var45 = var36.isEmpty();
        boolean var46 = var36.isEmpty();
        boolean var47 = var36.isEmpty();
        boolean var48 = var36.isEmpty();
        boolean var49 = var36.isEmpty();
        int var50 = var36.size();
        var0.add(0, (java.lang.Object) var36);
        boolean var52 = var36.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var54 = var36.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
    }
    
    public void test117() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test117");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        int var15 = var12.size();
        var12.removeAll();
        boolean var17 = var12.isEmpty();
        boolean var18 = var12.isEmpty();
        boolean var19 = var12.isEmpty();
        int var20 = var12.size();
        var12.removeAll();
        var0.add(0, (java.lang.Object) var12);
        int var23 = var12.size();
        boolean var24 = var12.isEmpty();
        var12.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
    }
    
    public void test118() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test118");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.add(0, (java.lang.Object) 100L);
        int var17 = var12.size();
        boolean var18 = var12.isEmpty();
        boolean var19 = var12.isEmpty();
        var12.remove(0);
        var12.removeAll();
        var12.removeAll();
        boolean var24 = var12.isEmpty();
        var12.removeAll();
        var12.removeAll();
        boolean var27 = var12.isEmpty();
        boolean var28 = var12.isEmpty();
        int var29 = var12.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(2, (java.lang.Object) var29);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
    }
    
    public void test119() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test119");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        java.lang.Object var19 = var6.get(0);
        var6.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        int var25 = var22.size();
        var22.add(0, (java.lang.Object) 1L);
        int var29 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var22.removeAll();
        boolean var33 = var22.isEmpty();
        int var34 = var22.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var6.add(10, (java.lang.Object) var22);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + true + "'", var19.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
    }
    
    public void test120() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test120");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var14);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.add(0, (java.lang.Object) 100L);
        int var34 = var29.size();
        int var35 = var29.size();
        int var36 = var29.size();
        var29.removeAll();
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        int var40 = var29.size();
        var29.removeAll();
        int var42 = var29.size();
        boolean var43 = var29.isEmpty();
        var29.removeAll();
        var0.add(1, (java.lang.Object) var29);
        var0.removeAll();
        boolean var47 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
    }
    
    public void test121() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test121");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        var0.add(0, (java.lang.Object) 0L);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
    }
    
    public void test122() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test122");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 1.0d);
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test123() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test123");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
    }
    
    public void test124() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test124");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        int var9 = var0.size();
        int var10 = var0.size();
        var0.removeAll();
        int var12 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
    }
    
    public void test125() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test125");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        int var9 = var0.size();
        var0.removeAll();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        boolean var23 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.removeAll();
        var29.removeAll();
        var25.add(0, (java.lang.Object) var29);
        var29.removeAll();
        var16.add(0, (java.lang.Object) var29);
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        var37.add(0, (java.lang.Object) 100L);
        int var42 = var37.size();
        int var43 = var37.size();
        var37.removeAll();
        int var45 = var37.size();
        var37.removeAll();
        int var47 = var37.size();
        var37.removeAll();
        var37.removeAll();
        var16.add(2, (java.lang.Object) var37);
        int var51 = var37.size();
        var37.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var37);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
    }
    
    public void test126() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test126");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        var9.removeAll();
        int var14 = var9.size();
        boolean var15 = var9.isEmpty();
        var9.removeAll();
        var0.add(0, (java.lang.Object) var9);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var20.removeAll();
        boolean var22 = var20.isEmpty();
        int var23 = var20.size();
        var20.removeAll();
        boolean var25 = var20.isEmpty();
        var20.removeAll();
        boolean var27 = var20.isEmpty();
        var20.removeAll();
        var20.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var31.removeAll();
        var31.removeAll();
        var20.add(0, (java.lang.Object) var31);
        var0.add(0, (java.lang.Object) var31);
        boolean var36 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
    }
    
    public void test127() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test127");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        var3.removeAll();
        int var16 = var3.size();
        boolean var17 = var3.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var19 = var3.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
    }
    
    public void test128() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test128");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var14);
        int var28 = var0.size();
        var0.remove(1);
        boolean var31 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        boolean var35 = var33.isEmpty();
        boolean var36 = var33.isEmpty();
        boolean var37 = var33.isEmpty();
        int var38 = var33.size();
        boolean var39 = var33.isEmpty();
        var33.removeAll();
        var33.removeAll();
        var33.removeAll();
        boolean var43 = var33.isEmpty();
        var33.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var33);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
    }
    
    public void test129() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test129");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        boolean var16 = var13.isEmpty();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        var13.removeAll();
        var13.removeAll();
        int var22 = var13.size();
        int var23 = var13.size();
        int var24 = var13.size();
        boolean var25 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        var13.removeAll();
        int var28 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var30.removeAll();
        boolean var32 = var30.isEmpty();
        int var33 = var30.size();
        var30.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        boolean var43 = var40.isEmpty();
        boolean var44 = var40.isEmpty();
        var36.add(0, (java.lang.Object) var44);
        var30.add(0, (java.lang.Object) var36);
        var30.removeAll();
        var13.add(0, (java.lang.Object) var30);
        int var49 = var13.size();
        int var50 = var13.size();
        boolean var51 = var13.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var53 = var13.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);
        
    }
    
    public void test130() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test130");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        var0.remove(1);
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        int var16 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        int var21 = var18.size();
        boolean var22 = var18.isEmpty();
        boolean var23 = var18.isEmpty();
        int var24 = var18.size();
        var18.removeAll();
        boolean var26 = var18.isEmpty();
        int var27 = var18.size();
        var18.removeAll();
        var0.add(0, (java.lang.Object) var18);
        boolean var30 = var18.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
    }
    
    public void test131() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test131");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var14);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.add(0, (java.lang.Object) 100L);
        int var34 = var29.size();
        int var35 = var29.size();
        int var36 = var29.size();
        var29.removeAll();
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        int var40 = var29.size();
        var29.removeAll();
        int var42 = var29.size();
        boolean var43 = var29.isEmpty();
        var29.removeAll();
        var0.add(1, (java.lang.Object) var29);
        var0.removeAll();
        int var47 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
    }
    
    public void test132() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test132");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var22 = var21.isEmpty();
        var21.removeAll();
        boolean var24 = var21.isEmpty();
        var21.removeAll();
        boolean var26 = var21.isEmpty();
        int var27 = var21.size();
        var0.add(1, (java.lang.Object) var21);
        boolean var29 = var0.isEmpty();
        int var30 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var32.removeAll();
        boolean var34 = var32.isEmpty();
        int var35 = var32.size();
        var32.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var44 = var43.size();
        boolean var45 = var43.isEmpty();
        var40.add(0, (java.lang.Object) var43);
        var43.add(0, (java.lang.Object) (-1.0d));
        var43.removeAll();
        boolean var51 = var43.isEmpty();
        int var52 = var43.size();
        boolean var53 = var43.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var56 = var55.isEmpty();
        var55.removeAll();
        var43.add(0, (java.lang.Object) var55);
        var55.removeAll();
        var32.add(0, (java.lang.Object) var55);
        boolean var61 = var55.isEmpty();
        int var62 = var55.size();
        var55.removeAll();
        var55.removeAll();
        var0.add(0, (java.lang.Object) var55);
        boolean var66 = var55.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
    }
    
    public void test133() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test133");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var17.removeAll();
        boolean var19 = var17.isEmpty();
        int var20 = var17.size();
        var17.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        boolean var29 = var27.isEmpty();
        boolean var30 = var27.isEmpty();
        boolean var31 = var27.isEmpty();
        var23.add(0, (java.lang.Object) var31);
        var17.add(0, (java.lang.Object) var23);
        int var34 = var23.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        var36.removeAll();
        int var40 = var36.size();
        boolean var41 = var36.isEmpty();
        boolean var42 = var36.isEmpty();
        boolean var43 = var36.isEmpty();
        var23.add(0, (java.lang.Object) var43);
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.removeAll();
        var50.removeAll();
        var46.add(0, (java.lang.Object) var50);
        boolean var55 = var46.isEmpty();
        boolean var56 = var46.isEmpty();
        boolean var57 = var46.isEmpty();
        var46.removeAll();
        var23.add(0, (java.lang.Object) var46);
        int var60 = var46.size();
        var46.removeAll();
        var0.add(0, (java.lang.Object) var46);
        int var63 = var46.size();
        boolean var64 = var46.isEmpty();
        int var65 = var46.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
    }
    
    public void test134() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test134");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        boolean var31 = var16.isEmpty();
        int var32 = var16.size();
        boolean var33 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var35.removeAll();
        boolean var37 = var35.isEmpty();
        int var38 = var35.size();
        var35.removeAll();
        boolean var40 = var35.isEmpty();
        boolean var41 = var35.isEmpty();
        int var42 = var35.size();
        var35.removeAll();
        var35.removeAll();
        boolean var45 = var35.isEmpty();
        boolean var46 = var35.isEmpty();
        var16.add(1, (java.lang.Object) var35);
        int var48 = var35.size();
        boolean var49 = var35.isEmpty();
        var35.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
    }
    
    public void test135() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test135");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var36.removeAll();
        boolean var38 = var36.isEmpty();
        var5.add(2, (java.lang.Object) var36);
        boolean var40 = var5.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var43 = var42.isEmpty();
        boolean var44 = var42.isEmpty();
        var42.removeAll();
        var42.add(0, (java.lang.Object) 1.0d);
        java.lang.Object var50 = var42.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        boolean var57 = var55.isEmpty();
        var52.add(0, (java.lang.Object) var55);
        var55.add(0, (java.lang.Object) (-1.0d));
        var55.removeAll();
        boolean var63 = var55.isEmpty();
        int var64 = var55.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var66 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var67 = var66.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var69 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var70 = var69.size();
        boolean var71 = var69.isEmpty();
        var66.add(0, (java.lang.Object) var69);
        int var73 = var69.size();
        boolean var74 = var69.isEmpty();
        var69.removeAll();
        var69.removeAll();
        var55.add(0, (java.lang.Object) var69);
        var69.removeAll();
        boolean var79 = var69.isEmpty();
        var42.add(1, (java.lang.Object) var69);
        boolean var81 = var42.isEmpty();
        java.lang.Object var83 = var42.get(1);
        var5.add(1, (java.lang.Object) var42);
        boolean var85 = var42.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + 1.0d + "'", var50.equals(1.0d));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var81 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var83);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == false);
        
    }
    
    public void test136() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test136");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 0L);
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        int var14 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        var17.add(0, (java.lang.Object) 100L);
        int var22 = var17.size();
        int var23 = var17.size();
        int var24 = var17.size();
        java.lang.Object var26 = var17.get(0);
        int var27 = var17.size();
        int var28 = var17.size();
        int var29 = var17.size();
        java.lang.Object var31 = var17.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        int var36 = var33.size();
        int var37 = var33.size();
        boolean var38 = var33.isEmpty();
        var33.removeAll();
        var17.add(0, (java.lang.Object) var33);
        java.lang.Object var42 = var17.get(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) 0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var26 + "' != '" + 100L + "'", var26.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var31 + "' != '" + 100L + "'", var31.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);
        
    }
    
    public void test137() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test137");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var4.isEmpty();
        int var10 = var4.size();
        var4.removeAll();
        var4.removeAll();
        int var13 = var4.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var4.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test138() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test138");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        boolean var34 = var0.isEmpty();
        java.lang.Object var36 = var0.get(0);
        var0.remove(3);
        int var39 = var0.size();
        int var40 = var0.size();
        boolean var41 = var0.isEmpty();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var36 + "' != '" + 100L + "'", var36.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
    }
    
    public void test139() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test139");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        java.lang.Object var14 = var0.get(0);
        java.lang.Object var16 = var0.get(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + true + "'", var14.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var16 + "' != '" + true + "'", var16.equals(true));
        
    }
    
    public void test140() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test140");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.remove(0);
        int var11 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        int var21 = var14.size();
        var14.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.add(0, (java.lang.Object) 100L);
        int var29 = var24.size();
        var24.remove(0);
        var24.removeAll();
        var14.add(0, (java.lang.Object) var24);
        boolean var34 = var24.isEmpty();
        var24.removeAll();
        boolean var36 = var24.isEmpty();
        boolean var37 = var24.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(1, (java.lang.Object) var24);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
    }
    
    public void test141() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test141");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        boolean var16 = var13.isEmpty();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        var13.removeAll();
        var13.removeAll();
        int var22 = var13.size();
        int var23 = var13.size();
        int var24 = var13.size();
        boolean var25 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        boolean var27 = var13.isEmpty();
        var13.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var30 = var13.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
    }
    
    public void test142() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test142");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        boolean var28 = var3.isEmpty();
        var3.remove(0);
        var3.removeAll();
        var3.removeAll();
        var3.removeAll();
        int var34 = var3.size();
        var3.removeAll();
        boolean var36 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        boolean var44 = var42.isEmpty();
        boolean var45 = var42.isEmpty();
        boolean var46 = var42.isEmpty();
        var38.add(0, (java.lang.Object) var46);
        boolean var48 = var38.isEmpty();
        boolean var49 = var38.isEmpty();
        boolean var50 = var38.isEmpty();
        int var51 = var38.size();
        var38.remove(0);
        var38.removeAll();
        boolean var55 = var38.isEmpty();
        int var56 = var38.size();
        int var57 = var38.size();
        var38.removeAll();
        int var59 = var38.size();
        var38.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var62 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var63 = var62.size();
        var62.add(0, (java.lang.Object) 100L);
        int var67 = var62.size();
        int var68 = var62.size();
        var62.removeAll();
        int var70 = var62.size();
        var62.removeAll();
        var62.removeAll();
        boolean var73 = var62.isEmpty();
        boolean var74 = var62.isEmpty();
        boolean var75 = var62.isEmpty();
        var38.add(0, (java.lang.Object) var62);
        var38.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(4, (java.lang.Object) var38);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == true);
        
    }
    
    public void test143() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test143");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        boolean var23 = var20.isEmpty();
        boolean var24 = var20.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        var16.removeAll();
        var16.removeAll();
        int var28 = var16.size();
        boolean var29 = var16.isEmpty();
        var16.removeAll();
        boolean var31 = var16.isEmpty();
        var16.removeAll();
        int var33 = var16.size();
        int var34 = var16.size();
        int var35 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var16.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
    }
    
    public void test144() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test144");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var13 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
    }
    
    public void test145() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test145");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        int var9 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        var11.add(0, (java.lang.Object) 100L);
        var0.add(0, (java.lang.Object) 0);
        boolean var17 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var19 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
    }
    
    public void test146() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test146");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 1.0d);
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        boolean var20 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        var26.removeAll();
        var22.add(0, (java.lang.Object) var26);
        var26.removeAll();
        var13.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        var34.removeAll();
        int var38 = var34.size();
        boolean var39 = var34.isEmpty();
        var26.add(0, (java.lang.Object) var34);
        boolean var41 = var34.isEmpty();
        var0.add(0, (java.lang.Object) var34);
        int var43 = var0.size();
        boolean var44 = var0.isEmpty();
        var0.removeAll();
        boolean var46 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
    }
    
    public void test147() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test147");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var17.removeAll();
        boolean var19 = var17.isEmpty();
        int var20 = var17.size();
        var17.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        boolean var29 = var27.isEmpty();
        boolean var30 = var27.isEmpty();
        boolean var31 = var27.isEmpty();
        var23.add(0, (java.lang.Object) var31);
        var17.add(0, (java.lang.Object) var23);
        int var34 = var23.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        var36.removeAll();
        int var40 = var36.size();
        boolean var41 = var36.isEmpty();
        boolean var42 = var36.isEmpty();
        boolean var43 = var36.isEmpty();
        var23.add(0, (java.lang.Object) var43);
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.removeAll();
        var50.removeAll();
        var46.add(0, (java.lang.Object) var50);
        boolean var55 = var46.isEmpty();
        boolean var56 = var46.isEmpty();
        boolean var57 = var46.isEmpty();
        var46.removeAll();
        var23.add(0, (java.lang.Object) var46);
        int var60 = var46.size();
        var46.removeAll();
        var0.add(0, (java.lang.Object) var46);
        boolean var63 = var0.isEmpty();
        int var64 = var0.size();
        int var65 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var67 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 1);
        
    }
    
    public void test148() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test148");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test149() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test149");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 1.0d);
        int var7 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var10 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
    }
    
    public void test150() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test150");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        boolean var24 = var15.isEmpty();
        boolean var25 = var15.isEmpty();
        boolean var26 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        var15.removeAll();
        boolean var30 = var15.isEmpty();
        int var31 = var15.size();
        boolean var32 = var15.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
    }
    
    public void test151() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test151");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        int var5 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        var7.add(0, (java.lang.Object) var10);
        var10.add(0, (java.lang.Object) (-1.0d));
        var10.removeAll();
        boolean var18 = var10.isEmpty();
        int var19 = var10.size();
        boolean var20 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var23 = var22.isEmpty();
        var22.removeAll();
        var10.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var22.removeAll();
        var0.add(0, (java.lang.Object) var22);
        int var29 = var22.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
    }
    
    public void test152() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test152");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var10.remove(0);
        var10.removeAll();
        int var20 = var10.size();
        int var21 = var10.size();
        var0.add(0, (java.lang.Object) var10);
        boolean var23 = var10.isEmpty();
        boolean var24 = var10.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
    }
    
    public void test153() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test153");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        boolean var16 = var0.isEmpty();
        boolean var17 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        boolean var26 = var23.isEmpty();
        boolean var27 = var23.isEmpty();
        var19.add(0, (java.lang.Object) var27);
        boolean var29 = var19.isEmpty();
        var19.removeAll();
        var19.removeAll();
        int var32 = var19.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) var19);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
    }
    
    public void test154() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test154");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        var0.removeAll();
        int var21 = var0.size();
        int var22 = var0.size();
        int var23 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
    }
    
    public void test155() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test155");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        boolean var31 = var16.isEmpty();
        int var32 = var16.size();
        boolean var33 = var16.isEmpty();
        var16.removeAll();
        boolean var35 = var16.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var37 = var16.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
    }
    
    public void test156() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test156");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        var19.removeAll();
        int var23 = var19.size();
        boolean var24 = var19.isEmpty();
        boolean var25 = var19.isEmpty();
        boolean var26 = var19.isEmpty();
        var6.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        var29.add(0, (java.lang.Object) var33);
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        boolean var40 = var29.isEmpty();
        var29.removeAll();
        var6.add(0, (java.lang.Object) var29);
        int var43 = var29.size();
        var29.removeAll();
        int var45 = var29.size();
        boolean var46 = var29.isEmpty();
        int var47 = var29.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var29.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
    }
    
    public void test157() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test157");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        boolean var38 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        boolean var50 = var40.isEmpty();
        var40.removeAll();
        boolean var52 = var40.isEmpty();
        var32.add(1, (java.lang.Object) var40);
        var32.removeAll();
        var0.add(2, (java.lang.Object) var32);
        ar.verificacion.validacion.treelistimplementation.TreeList var57 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var58 = var57.size();
        var57.removeAll();
        int var60 = var57.size();
        var57.removeAll();
        var57.add(0, (java.lang.Object) 100L);
        var57.removeAll();
        var0.add(2, (java.lang.Object) var57);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var68 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
    }
    
    public void test158() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test158");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        boolean var24 = var15.isEmpty();
        boolean var25 = var15.isEmpty();
        boolean var26 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        var15.removeAll();
        var15.removeAll();
        var15.removeAll();
        boolean var32 = var15.isEmpty();
        boolean var33 = var15.isEmpty();
        boolean var34 = var15.isEmpty();
        var15.removeAll();
        boolean var36 = var15.isEmpty();
        boolean var37 = var15.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
    }
    
    public void test159() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test159");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        var3.removeAll();
        boolean var16 = var3.isEmpty();
        int var17 = var3.size();
        var3.removeAll();
        boolean var19 = var3.isEmpty();
        boolean var20 = var3.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var22 = var3.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
    }
    
    public void test160() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test160");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var11.removeAll();
        boolean var13 = var11.isEmpty();
        int var14 = var11.size();
        var11.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        boolean var24 = var22.isEmpty();
        var19.add(0, (java.lang.Object) var22);
        var22.add(0, (java.lang.Object) (-1.0d));
        var22.removeAll();
        boolean var30 = var22.isEmpty();
        int var31 = var22.size();
        boolean var32 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var35 = var34.isEmpty();
        var34.removeAll();
        var22.add(0, (java.lang.Object) var34);
        var34.removeAll();
        var11.add(0, (java.lang.Object) var34);
        var0.add(0, (java.lang.Object) var34);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
    }
    
    public void test161() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test161");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var10 = var9.isEmpty();
        var9.removeAll();
        var0.add(0, (java.lang.Object) var9);
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        java.lang.Object var22 = var14.get(0);
        boolean var23 = var14.isEmpty();
        boolean var24 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.add(0, (java.lang.Object) 100L);
        boolean var31 = var26.isEmpty();
        var26.removeAll();
        var14.add(0, (java.lang.Object) var26);
        int var34 = var14.size();
        int var35 = var14.size();
        var14.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var14);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var22 + "' != '" + 100L + "'", var22.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 2);
        
    }
    
    public void test162() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test162");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var14.removeAll();
        boolean var16 = var14.isEmpty();
        int var17 = var14.size();
        var14.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        boolean var27 = var24.isEmpty();
        boolean var28 = var24.isEmpty();
        var20.add(0, (java.lang.Object) var28);
        var14.add(0, (java.lang.Object) var20);
        int var31 = var20.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        boolean var35 = var33.isEmpty();
        var33.removeAll();
        int var37 = var33.size();
        boolean var38 = var33.isEmpty();
        boolean var39 = var33.isEmpty();
        boolean var40 = var33.isEmpty();
        var20.add(0, (java.lang.Object) var40);
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var43.removeAll();
        boolean var45 = var43.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var47 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var48 = var47.size();
        var47.removeAll();
        var47.removeAll();
        var43.add(0, (java.lang.Object) var47);
        boolean var52 = var43.isEmpty();
        boolean var53 = var43.isEmpty();
        boolean var54 = var43.isEmpty();
        var43.removeAll();
        var20.add(0, (java.lang.Object) var43);
        java.lang.Object var58 = var20.get(0);
        int var59 = var20.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var61 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var61.removeAll();
        boolean var63 = var61.isEmpty();
        int var64 = var61.size();
        var61.add(0, (java.lang.Object) 1L);
        int var68 = var61.size();
        boolean var69 = var61.isEmpty();
        var61.removeAll();
        var61.removeAll();
        var20.add(1, (java.lang.Object) var61);
        int var73 = var61.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var61);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var58);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 0);
        
    }
    
    public void test163() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test163");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        var3.removeAll();
        int var20 = var3.size();
        boolean var21 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        var23.add(0, (java.lang.Object) 100L);
        int var28 = var23.size();
        int var29 = var23.size();
        int var30 = var23.size();
        boolean var31 = var23.isEmpty();
        int var32 = var23.size();
        boolean var33 = var23.isEmpty();
        int var34 = var23.size();
        var3.add(0, (java.lang.Object) var23);
        boolean var36 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var39 = var38.isEmpty();
        boolean var40 = var38.isEmpty();
        var38.removeAll();
        boolean var42 = var38.isEmpty();
        var38.removeAll();
        var23.add(1, (java.lang.Object) var38);
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.removeAll();
        var50.removeAll();
        var46.add(0, (java.lang.Object) var50);
        boolean var55 = var46.isEmpty();
        boolean var56 = var46.isEmpty();
        int var57 = var46.size();
        int var58 = var46.size();
        java.lang.Object var60 = var46.get(0);
        boolean var61 = var46.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var23.add(100, (java.lang.Object) var61);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == false);
        
    }
    
    public void test164() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test164");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var9 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
    }
    
    public void test165() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test165");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        int var13 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var17 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test166() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test166");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        int var2 = var0.size();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        var8.add(0, (java.lang.Object) 100L);
        int var13 = var8.size();
        int var14 = var8.size();
        int var15 = var8.size();
        int var16 = var8.size();
        var8.remove(0);
        boolean var19 = var8.isEmpty();
        boolean var20 = var8.isEmpty();
        int var21 = var8.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(2, (java.lang.Object) var21);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
    }
    
    public void test167() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test167");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
    }
    
    public void test168() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test168");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        var0.remove(0);
        boolean var22 = var0.isEmpty();
        int var23 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var26 = var25.isEmpty();
        boolean var27 = var25.isEmpty();
        var25.removeAll();
        var25.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        var31.add(0, (java.lang.Object) var34);
        var34.add(0, (java.lang.Object) (-1.0d));
        boolean var41 = var34.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var43.removeAll();
        boolean var45 = var43.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var47 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var48 = var47.size();
        var47.removeAll();
        var47.removeAll();
        var43.add(0, (java.lang.Object) var47);
        var47.removeAll();
        var34.add(0, (java.lang.Object) var47);
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        boolean var57 = var55.isEmpty();
        var55.removeAll();
        int var59 = var55.size();
        boolean var60 = var55.isEmpty();
        var47.add(0, (java.lang.Object) var55);
        int var62 = var47.size();
        var25.add(0, (java.lang.Object) var47);
        java.lang.Object var65 = var47.get(0);
        var47.removeAll();
        var47.removeAll();
        var0.add(0, (java.lang.Object) var47);
        var47.removeAll();
        int var70 = var47.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
    }
    
    public void test169() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test169");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var29);
        var26.removeAll();
        var26.removeAll();
        int var35 = var26.size();
        boolean var36 = var26.isEmpty();
        var3.add(2, (java.lang.Object) var36);
        boolean var38 = var3.isEmpty();
        java.lang.Object var40 = var3.get(2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var40 + "' != '" + true + "'", var40.equals(true));
        
    }
    
    public void test170() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test170");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        int var29 = var26.size();
        var26.removeAll();
        var3.add(2, (java.lang.Object) var26);
        var26.removeAll();
        boolean var33 = var26.isEmpty();
        var26.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        boolean var39 = var36.isEmpty();
        boolean var40 = var36.isEmpty();
        int var41 = var36.size();
        int var42 = var36.size();
        var26.add(0, (java.lang.Object) var36);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var36.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
    }
    
    public void test171() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test171");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
    }
    
    public void test172() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test172");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        int var14 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 2);
        
    }
    
    public void test173() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test173");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.add(0, (java.lang.Object) 100L);
        var12.removeAll();
        boolean var18 = var12.isEmpty();
        var0.add(1, (java.lang.Object) var12);
        int var20 = var0.size();
        boolean var21 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var25 = var24.isEmpty();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        var24.add(0, (java.lang.Object) 1.0d);
        int var31 = var24.size();
        var24.removeAll();
        boolean var33 = var24.isEmpty();
        int var34 = var24.size();
        var24.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(5, (java.lang.Object) var24);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
    }
    
    public void test174() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test174");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        int var11 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        boolean var16 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        boolean var26 = var23.isEmpty();
        boolean var27 = var23.isEmpty();
        var19.add(0, (java.lang.Object) var27);
        boolean var29 = var19.isEmpty();
        var19.removeAll();
        boolean var31 = var19.isEmpty();
        int var32 = var19.size();
        int var33 = var19.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var19);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
    }
    
    public void test175() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test175");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var11.removeAll();
        int var13 = var11.size();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        boolean var17 = var11.isEmpty();
        var11.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        var20.add(0, (java.lang.Object) var23);
        var23.add(0, (java.lang.Object) (-1.0d));
        var23.removeAll();
        boolean var31 = var23.isEmpty();
        int var32 = var23.size();
        boolean var33 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var36 = var35.isEmpty();
        var35.removeAll();
        var23.add(0, (java.lang.Object) var35);
        int var39 = var23.size();
        boolean var40 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        var42.removeAll();
        var42.removeAll();
        boolean var46 = var42.isEmpty();
        var23.add(1, (java.lang.Object) var42);
        boolean var48 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.add(0, (java.lang.Object) 100L);
        int var55 = var50.size();
        boolean var56 = var50.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var59 = var58.size();
        boolean var60 = var58.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var62 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var63 = var62.size();
        boolean var64 = var62.isEmpty();
        boolean var65 = var62.isEmpty();
        boolean var66 = var62.isEmpty();
        var58.add(0, (java.lang.Object) var66);
        boolean var68 = var58.isEmpty();
        java.lang.Object var70 = var58.get(0);
        var58.remove(0);
        boolean var73 = var58.isEmpty();
        var50.add(0, (java.lang.Object) var73);
        var23.add(1, (java.lang.Object) var50);
        var50.removeAll();
        int var77 = var50.size();
        boolean var78 = var50.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var11.add(1, (java.lang.Object) var78);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var70 + "' != '" + true + "'", var70.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var78 == true);
        
    }
    
    public void test176() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test176");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        java.lang.Object var35 = var0.get(1);
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        var37.add(0, (java.lang.Object) var40);
        int var44 = var40.size();
        boolean var45 = var40.isEmpty();
        var40.removeAll();
        var40.removeAll();
        var40.removeAll();
        var40.removeAll();
        int var50 = var40.size();
        var40.removeAll();
        var40.removeAll();
        int var53 = var40.size();
        int var54 = var40.size();
        var0.add(4, (java.lang.Object) var40);
        var40.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + false + "'", var35.equals(false));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
    }
    
    public void test177() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test177");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        var9.removeAll();
        int var14 = var9.size();
        boolean var15 = var9.isEmpty();
        var9.removeAll();
        var0.add(0, (java.lang.Object) var9);
        int var18 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
    }
    
    public void test178() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test178");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        var14.removeAll();
        var14.removeAll();
        int var20 = var14.size();
        int var21 = var14.size();
        var3.add(0, (java.lang.Object) var14);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.add(0, (java.lang.Object) 100L);
        int var29 = var24.size();
        int var30 = var24.size();
        int var31 = var24.size();
        var24.add(1, (java.lang.Object) 1.0d);
        int var35 = var24.size();
        var24.remove(0);
        int var38 = var24.size();
        int var39 = var24.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(4, (java.lang.Object) var24);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
    }
    
    public void test179() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test179");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
    }
    
    public void test180() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test180");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        int var15 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test181() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test181");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        boolean var18 = var14.isEmpty();
        var10.add(0, (java.lang.Object) var18);
        boolean var20 = var10.isEmpty();
        boolean var21 = var10.isEmpty();
        boolean var22 = var10.isEmpty();
        java.lang.Object var24 = var10.get(0);
        boolean var25 = var10.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        int var27 = var0.size();
        boolean var28 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + true + "'", var24.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
    }
    
    public void test182() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test182");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        int var31 = var16.size();
        int var32 = var16.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var34 = var16.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
    }
    
    public void test183() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test183");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        boolean var18 = var14.isEmpty();
        boolean var19 = var14.isEmpty();
        var14.removeAll();
        var14.removeAll();
        var14.removeAll();
        int var23 = var14.size();
        var14.removeAll();
        var14.removeAll();
        int var26 = var14.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var26);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + (byte) 1 + "'",
                var9.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
    }
    
    public void test184() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test184");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test185() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test185");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        var19.removeAll();
        int var23 = var19.size();
        boolean var24 = var19.isEmpty();
        boolean var25 = var19.isEmpty();
        boolean var26 = var19.isEmpty();
        var6.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        var29.add(0, (java.lang.Object) var33);
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        boolean var40 = var29.isEmpty();
        var29.removeAll();
        var6.add(0, (java.lang.Object) var29);
        java.lang.Object var44 = var6.get(0);
        boolean var45 = var6.isEmpty();
        java.lang.Object var47 = var6.get(2);
        boolean var48 = var6.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var47 + "' != '" + true + "'", var47.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
    }
    
    public void test186() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test186");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        java.lang.Object var13 = var0.get(0);
        int var14 = var0.size();
        var0.removeAll();
        int var16 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + false + "'", var13.equals(false));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
    }
    
    public void test187() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test187");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
    }
    
    public void test188() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test188");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        var0.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var23.removeAll();
        boolean var25 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        var27.removeAll();
        var27.removeAll();
        var23.add(0, (java.lang.Object) var27);
        var27.removeAll();
        var27.removeAll();
        boolean var34 = var27.isEmpty();
        var27.removeAll();
        var0.add(0, (java.lang.Object) var27);
        int var37 = var0.size();
        boolean var38 = var0.isEmpty();
        boolean var39 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
    }
    
    public void test189() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test189");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.remove(0);
        var0.removeAll();
        boolean var17 = var0.isEmpty();
        int var18 = var0.size();
        int var19 = var0.size();
        var0.removeAll();
        boolean var21 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
    }
    
    public void test190() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test190");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        boolean var28 = var3.isEmpty();
        var3.removeAll();
        int var30 = var3.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
    }
    
    public void test191() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test191");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test192() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test192");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (short) 100);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        java.lang.Object var22 = var14.get(0);
        var14.remove(0);
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        var14.removeAll();
        boolean var28 = var14.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var28);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var22 + "' != '" + 100L + "'", var22.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
    }
    
    public void test193() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test193");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        int var15 = var3.size();
        boolean var16 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        boolean var23 = var21.isEmpty();
        var18.add(0, (java.lang.Object) var21);
        var21.add(0, (java.lang.Object) (-1.0d));
        var21.removeAll();
        boolean var29 = var21.isEmpty();
        int var30 = var21.size();
        boolean var31 = var21.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var33.removeAll();
        boolean var35 = var33.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        var37.removeAll();
        var37.removeAll();
        var33.add(0, (java.lang.Object) var37);
        var21.add(0, (java.lang.Object) var37);
        var37.removeAll();
        boolean var44 = var37.isEmpty();
        boolean var45 = var37.isEmpty();
        var37.removeAll();
        boolean var47 = var37.isEmpty();
        var3.add(0, (java.lang.Object) var37);
        int var49 = var3.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var51 = var3.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 1);
        
    }
    
    public void test194() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test194");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        int var14 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 2);
        
    }
    
    public void test195() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test195");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        int var13 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        boolean var17 = var15.isEmpty();
        var15.removeAll();
        var15.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var21.add(0, (java.lang.Object) var24);
        var24.add(0, (java.lang.Object) (-1.0d));
        boolean var31 = var24.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var33.removeAll();
        boolean var35 = var33.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        var37.removeAll();
        var37.removeAll();
        var33.add(0, (java.lang.Object) var37);
        var37.removeAll();
        var24.add(0, (java.lang.Object) var37);
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var46 = var45.size();
        boolean var47 = var45.isEmpty();
        var45.removeAll();
        int var49 = var45.size();
        boolean var50 = var45.isEmpty();
        var37.add(0, (java.lang.Object) var45);
        int var52 = var37.size();
        var15.add(0, (java.lang.Object) var37);
        boolean var54 = var37.isEmpty();
        int var55 = var37.size();
        int var56 = var37.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var59 = var58.size();
        var58.removeAll();
        int var61 = var58.size();
        boolean var62 = var58.isEmpty();
        int var63 = var58.size();
        int var64 = var58.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var66 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var67 = var66.isEmpty();
        var66.removeAll();
        int var69 = var66.size();
        var66.removeAll();
        var66.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var75 = var66.get(0);
        int var76 = var66.size();
        int var77 = var66.size();
        var66.remove(0);
        var58.add(0, (java.lang.Object) var66);
        var37.add(0, (java.lang.Object) 0);
        java.lang.Object var83 = var37.get(1);
        boolean var84 = var37.isEmpty();
        boolean var85 = var37.isEmpty();
        int var86 = var37.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var86);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var75 + "' != '" + (byte) 1 + "'",
                var75.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var83);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var86 == 2);
        
    }
    
    public void test196() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test196");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test197() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test197");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        var13.removeAll();
        boolean var21 = var13.isEmpty();
        var13.removeAll();
        var0.add(0, (java.lang.Object) var13);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
    }
    
    public void test198() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test198");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        var6.add(0, (java.lang.Object) var9);
        var9.add(0, (java.lang.Object) (-1.0d));
        boolean var16 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var18.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var9.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        int var34 = var30.size();
        boolean var35 = var30.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        int var37 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        var22.removeAll();
        boolean var40 = var22.isEmpty();
        var22.removeAll();
        var22.removeAll();
        boolean var43 = var22.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
    }
    
    public void test199() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test199");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var8.add(0, (java.lang.Object) var11);
        var11.add(0, (java.lang.Object) (-1.0d));
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        int var20 = var11.size();
        boolean var21 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var24 = var23.isEmpty();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        var23.removeAll();
        var0.add(0, (java.lang.Object) var23);
        var0.remove(1);
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var33 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
    }
    
    public void test200() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test200");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        int var21 = var17.size();
        boolean var22 = var17.isEmpty();
        var17.removeAll();
        var17.removeAll();
        var3.add(0, (java.lang.Object) var17);
        var17.removeAll();
        boolean var27 = var17.isEmpty();
        int var28 = var17.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
    }
    
    public void test201() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test201");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.removeAll();
        int var26 = var0.size();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
    }
    
    public void test202() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test202");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var11 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test203() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test203");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 0L);
        int var9 = var0.size();
        var0.removeAll();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        boolean var16 = var13.isEmpty();
        boolean var17 = var13.isEmpty();
        var13.removeAll();
        int var19 = var13.size();
        var13.removeAll();
        var0.add(0, (java.lang.Object) var13);
        int var22 = var0.size();
        boolean var23 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
    }
    
    public void test204() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test204");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        boolean var20 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        var26.removeAll();
        var22.add(0, (java.lang.Object) var26);
        var26.removeAll();
        var13.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        var34.removeAll();
        int var38 = var34.size();
        boolean var39 = var34.isEmpty();
        var26.add(0, (java.lang.Object) var34);
        int var41 = var26.size();
        boolean var42 = var26.isEmpty();
        var0.add(0, (java.lang.Object) var26);
        int var44 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var47 = var46.size();
        var46.add(0, (java.lang.Object) 100L);
        int var51 = var46.size();
        int var52 = var46.size();
        var46.removeAll();
        int var54 = var46.size();
        var46.add(0, (java.lang.Object) 2);
        int var58 = var46.size();
        var46.removeAll();
        var26.add(1, (java.lang.Object) var46);
        int var61 = var46.size();
        var46.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
    }
    
    public void test205() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test205");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var16.isEmpty();
        boolean var29 = var16.isEmpty();
        boolean var30 = var16.isEmpty();
        var16.removeAll();
        int var32 = var16.size();
        int var33 = var16.size();
        var16.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
    }
    
    public void test206() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test206");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        int var13 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test207() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test207");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
    }
    
    public void test208() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test208");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var0.size();
        int var8 = var0.size();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test209() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test209");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        var6.add(0, (java.lang.Object) var9);
        var9.add(0, (java.lang.Object) (-1.0d));
        boolean var16 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var18.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var9.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        int var34 = var30.size();
        boolean var35 = var30.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        int var37 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        boolean var39 = var22.isEmpty();
        boolean var40 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var42.removeAll();
        boolean var44 = var42.isEmpty();
        int var45 = var42.size();
        boolean var46 = var42.isEmpty();
        boolean var47 = var42.isEmpty();
        var42.removeAll();
        boolean var49 = var42.isEmpty();
        boolean var50 = var42.isEmpty();
        int var51 = var42.size();
        var42.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var54 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var55 = var54.size();
        var54.add(0, (java.lang.Object) 100L);
        int var59 = var54.size();
        int var60 = var54.size();
        var54.removeAll();
        var54.removeAll();
        var54.removeAll();
        int var64 = var54.size();
        var42.add(0, (java.lang.Object) var54);
        var22.add(1, (java.lang.Object) var54);
        var22.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
    }
    
    public void test210() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test210");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var19.removeAll();
        boolean var21 = var19.isEmpty();
        int var22 = var19.size();
        var19.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        var30.add(0, (java.lang.Object) (-1.0d));
        var30.removeAll();
        boolean var38 = var30.isEmpty();
        int var39 = var30.size();
        boolean var40 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var43 = var42.isEmpty();
        var42.removeAll();
        var30.add(0, (java.lang.Object) var42);
        var42.removeAll();
        var19.add(0, (java.lang.Object) var42);
        var14.add(0, (java.lang.Object) var19);
        java.lang.Object var50 = var19.get(1);
        var19.add(1, (java.lang.Object) 100.0f);
        java.lang.Object var55 = var19.get(1);
        var0.add(0, (java.lang.Object) var19);
        boolean var57 = var19.isEmpty();
        int var58 = var19.size();
        boolean var59 = var19.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var19.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + 100L + "'", var9.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + 1L + "'", var50.equals(1L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var55 + "' != '" + 100.0f + "'", var55.equals(100.0f));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);
        
    }
    
    public void test211() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test211");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.removeAll();
        int var16 = var13.size();
        var13.removeAll();
        var13.add(0, (java.lang.Object) 100L);
        int var21 = var13.size();
        var13.removeAll();
        int var23 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        var25.removeAll();
        int var28 = var25.size();
        boolean var29 = var25.isEmpty();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        var13.add(0, (java.lang.Object) var25);
        boolean var33 = var13.isEmpty();
        boolean var34 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var13.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
    }
    
    public void test212() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test212");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        boolean var28 = var3.isEmpty();
        var3.remove(0);
        var3.removeAll();
        var3.removeAll();
        boolean var33 = var3.isEmpty();
        boolean var34 = var3.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
    }
    
    public void test213() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test213");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        boolean var13 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        int var18 = var15.size();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        var15.removeAll();
        boolean var22 = var15.isEmpty();
        int var23 = var15.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var15.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
    }
    
    public void test214() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test214");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        var3.add(0, (java.lang.Object) var19);
        var19.removeAll();
        boolean var26 = var19.isEmpty();
        boolean var27 = var19.isEmpty();
        var19.removeAll();
        boolean var29 = var19.isEmpty();
        var19.removeAll();
        int var31 = var19.size();
        int var32 = var19.size();
        var19.removeAll();
        boolean var34 = var19.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
    }
    
    public void test215() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test215");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var18 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
    }
    
    public void test216() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test216");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        boolean var12 = var3.isEmpty();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        var3.removeAll();
        boolean var16 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        boolean var23 = var18.isEmpty();
        int var24 = var18.size();
        int var25 = var18.size();
        var18.removeAll();
        boolean var27 = var18.isEmpty();
        var18.removeAll();
        int var29 = var18.size();
        var3.add(0, (java.lang.Object) var18);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        int var38 = var32.size();
        int var39 = var32.size();
        int var40 = var32.size();
        var32.remove(0);
        var32.removeAll();
        var32.removeAll();
        boolean var45 = var32.isEmpty();
        boolean var46 = var32.isEmpty();
        var32.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(3, (java.lang.Object) var32);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
    }
    
    public void test217() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test217");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        int var2 = var0.size();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var6 = var5.size();
        boolean var7 = var5.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        boolean var12 = var9.isEmpty();
        boolean var13 = var9.isEmpty();
        var5.add(0, (java.lang.Object) var13);
        boolean var15 = var5.isEmpty();
        boolean var16 = var5.isEmpty();
        boolean var17 = var5.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        boolean var26 = var23.isEmpty();
        boolean var27 = var23.isEmpty();
        var19.add(0, (java.lang.Object) var27);
        boolean var29 = var19.isEmpty();
        var19.removeAll();
        boolean var31 = var19.isEmpty();
        var5.add(0, (java.lang.Object) var19);
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        var34.add(0, (java.lang.Object) 100L);
        int var39 = var34.size();
        int var40 = var34.size();
        int var41 = var34.size();
        var34.removeAll();
        boolean var43 = var34.isEmpty();
        boolean var44 = var34.isEmpty();
        int var45 = var34.size();
        var34.removeAll();
        int var47 = var34.size();
        boolean var48 = var34.isEmpty();
        var34.removeAll();
        var5.add(1, (java.lang.Object) var34);
        boolean var51 = var34.isEmpty();
        boolean var52 = var34.isEmpty();
        boolean var53 = var34.isEmpty();
        var0.add(0, (java.lang.Object) var34);
        int var55 = var34.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
    }
    
    public void test218() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test218");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        boolean var34 = var0.isEmpty();
        var0.remove(2);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var38 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
    }
    
    public void test219() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test219");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        var8.removeAll();
        int var12 = var8.size();
        boolean var13 = var8.isEmpty();
        var8.removeAll();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        int var17 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test220() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test220");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        var13.removeAll();
        boolean var21 = var13.isEmpty();
        var13.removeAll();
        var0.add(0, (java.lang.Object) var13);
        boolean var24 = var13.isEmpty();
        var13.removeAll();
        int var26 = var13.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var28 = var13.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
    }
    
    public void test221() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test221");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        java.lang.Object var25 = var0.get(0);
        boolean var26 = var0.isEmpty();
        var0.removeAll();
        boolean var28 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + 100L + "'", var25.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
    }
    
    public void test222() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test222");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
    }
    
    public void test223() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test223");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        boolean var16 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
    }
    
    public void test224() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test224");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        boolean var19 = var3.isEmpty();
        java.lang.Object var21 = var3.get(0);
        boolean var22 = var3.isEmpty();
        int var23 = var3.size();
        boolean var24 = var3.isEmpty();
        int var25 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
    }
    
    public void test225() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test225");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
    }
    
    public void test226() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test226");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
    }
    
    public void test227() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test227");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        int var14 = var0.size();
        boolean var15 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var17 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
    }
    
    public void test228() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test228");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 100L);
        int var8 = var0.size();
        var0.removeAll();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        int var15 = var12.size();
        boolean var16 = var12.isEmpty();
        int var17 = var12.size();
        boolean var18 = var12.isEmpty();
        var0.add(0, (java.lang.Object) var12);
        var12.removeAll();
        int var21 = var12.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var12.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
    }
    
    public void test229() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test229");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        int var15 = var3.size();
        int var16 = var3.size();
        int var17 = var3.size();
        var3.removeAll();
        boolean var19 = var3.isEmpty();
        boolean var20 = var3.isEmpty();
        int var21 = var3.size();
        int var22 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
    }
    
    public void test230() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test230");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        var0.removeAll();
        int var29 = var0.size();
        int var30 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
    }
    
    public void test231() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test231");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test232() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test232");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        boolean var20 = var10.isEmpty();
        var10.removeAll();
        boolean var22 = var10.isEmpty();
        int var23 = var10.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var25 = var10.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
    }
    
    public void test233() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test233");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        int var15 = var12.size();
        var12.removeAll();
        boolean var17 = var12.isEmpty();
        var12.removeAll();
        var12.removeAll();
        boolean var20 = var12.isEmpty();
        int var21 = var12.size();
        boolean var22 = var12.isEmpty();
        var0.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        boolean var27 = var25.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        boolean var32 = var29.isEmpty();
        boolean var33 = var29.isEmpty();
        var25.add(0, (java.lang.Object) var33);
        int var35 = var25.size();
        int var36 = var25.size();
        boolean var37 = var25.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        var39.add(0, (java.lang.Object) 100L);
        int var44 = var39.size();
        boolean var45 = var39.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var47 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var48 = var47.size();
        boolean var49 = var47.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var51 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var52 = var51.size();
        boolean var53 = var51.isEmpty();
        boolean var54 = var51.isEmpty();
        boolean var55 = var51.isEmpty();
        var47.add(0, (java.lang.Object) var55);
        boolean var57 = var47.isEmpty();
        var47.removeAll();
        boolean var59 = var47.isEmpty();
        var39.add(1, (java.lang.Object) var47);
        var25.add(1, (java.lang.Object) 1);
        boolean var62 = var25.isEmpty();
        boolean var63 = var25.isEmpty();
        int var64 = var25.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var66 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var67 = var66.size();
        var66.add(0, (java.lang.Object) 100L);
        int var71 = var66.size();
        var66.remove(0);
        boolean var74 = var66.isEmpty();
        int var75 = var66.size();
        var25.add(1, (java.lang.Object) var75);
        boolean var77 = var25.isEmpty();
        var0.add(0, (java.lang.Object) var25);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var80 = var25.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == false);
        
    }
    
    public void test234() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test234");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        boolean var28 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.add(0, (java.lang.Object) 100L);
        int var35 = var30.size();
        boolean var36 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        boolean var44 = var42.isEmpty();
        boolean var45 = var42.isEmpty();
        boolean var46 = var42.isEmpty();
        var38.add(0, (java.lang.Object) var46);
        boolean var48 = var38.isEmpty();
        java.lang.Object var50 = var38.get(0);
        var38.remove(0);
        boolean var53 = var38.isEmpty();
        var30.add(0, (java.lang.Object) var53);
        var3.add(1, (java.lang.Object) var30);
        var30.removeAll();
        var30.removeAll();
        var30.removeAll();
        int var59 = var30.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + true + "'", var50.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
    }
    
    public void test235() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test235");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        var11.add(0, (java.lang.Object) var14);
        var14.add(0, (java.lang.Object) (-1.0d));
        var14.removeAll();
        boolean var22 = var14.isEmpty();
        int var23 = var14.size();
        boolean var24 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var27 = var26.isEmpty();
        var26.removeAll();
        var14.add(0, (java.lang.Object) var26);
        int var30 = var14.size();
        boolean var31 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        boolean var37 = var33.isEmpty();
        var14.add(1, (java.lang.Object) var33);
        boolean var39 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        var41.add(0, (java.lang.Object) 100L);
        int var46 = var41.size();
        boolean var47 = var41.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var49 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var50 = var49.size();
        boolean var51 = var49.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var54 = var53.size();
        boolean var55 = var53.isEmpty();
        boolean var56 = var53.isEmpty();
        boolean var57 = var53.isEmpty();
        var49.add(0, (java.lang.Object) var57);
        boolean var59 = var49.isEmpty();
        java.lang.Object var61 = var49.get(0);
        var49.remove(0);
        boolean var64 = var49.isEmpty();
        var41.add(0, (java.lang.Object) var64);
        var14.add(1, (java.lang.Object) var41);
        ar.verificacion.validacion.treelistimplementation.TreeList var68 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var69 = var68.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var71 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var72 = var71.size();
        boolean var73 = var71.isEmpty();
        var68.add(0, (java.lang.Object) var71);
        int var75 = var68.size();
        var68.removeAll();
        var68.removeAll();
        var68.removeAll();
        int var79 = var68.size();
        var68.removeAll();
        var41.add(1, (java.lang.Object) var68);
        int var82 = var41.size();
        var0.add(0, (java.lang.Object) var82);
        boolean var84 = var0.isEmpty();
        boolean var85 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var61 + "' != '" + true + "'", var61.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == false);
        
    }
    
    public void test236() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test236");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        int var14 = var0.size();
        boolean var15 = var0.isEmpty();
        boolean var16 = var0.isEmpty();
        int var17 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 2);
        
    }
    
    public void test237() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test237");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var10 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
    }
    
    public void test238() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test238");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        var0.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var13 = var12.isEmpty();
        var12.removeAll();
        int var15 = var12.size();
        var12.removeAll();
        var12.add(0, (java.lang.Object) (byte) 1);
        boolean var20 = var12.isEmpty();
        int var21 = var12.size();
        var12.removeAll();
        boolean var23 = var12.isEmpty();
        var12.removeAll();
        int var25 = var12.size();
        var0.add(0, (java.lang.Object) var25);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var28 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
    }
    
    public void test239() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test239");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        boolean var11 = var9.isEmpty();
        var6.add(0, (java.lang.Object) var9);
        var9.add(0, (java.lang.Object) (-1.0d));
        boolean var16 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        var18.add(0, (java.lang.Object) var22);
        var22.removeAll();
        var9.add(0, (java.lang.Object) var22);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        int var34 = var30.size();
        boolean var35 = var30.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        int var37 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        int var39 = var0.size();
        var0.removeAll();
        boolean var41 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
    }
    
    public void test240() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test240");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        java.lang.Object var36 = var5.get(0);
        int var37 = var5.size();
        var5.removeAll();
        boolean var39 = var5.isEmpty();
        int var40 = var5.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var46 = var45.size();
        boolean var47 = var45.isEmpty();
        var42.add(0, (java.lang.Object) var45);
        var42.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        var52.add(0, (java.lang.Object) 100L);
        int var57 = var52.size();
        boolean var58 = var52.isEmpty();
        boolean var59 = var52.isEmpty();
        var52.removeAll();
        boolean var61 = var52.isEmpty();
        int var62 = var52.size();
        var42.add(0, (java.lang.Object) var62);
        var42.removeAll();
        int var65 = var42.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var5.add(10, (java.lang.Object) var42);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
    }
    
    public void test241() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test241");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        java.lang.Object var8 = var0.get(0);
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var14 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var8 + "' != '" + 100L + "'", var8.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
    }
    
    public void test242() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test242");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var16.isEmpty();
        boolean var29 = var16.isEmpty();
        int var30 = var16.size();
        boolean var31 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        boolean var35 = var33.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        boolean var39 = var37.isEmpty();
        boolean var40 = var37.isEmpty();
        boolean var41 = var37.isEmpty();
        var33.add(0, (java.lang.Object) var41);
        boolean var43 = var33.isEmpty();
        var33.removeAll();
        int var45 = var33.size();
        var33.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var48 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var48.removeAll();
        boolean var50 = var48.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        var52.removeAll();
        var52.removeAll();
        var48.add(0, (java.lang.Object) var52);
        boolean var57 = var48.isEmpty();
        boolean var58 = var48.isEmpty();
        boolean var59 = var48.isEmpty();
        var48.removeAll();
        var33.add(0, (java.lang.Object) var48);
        int var62 = var33.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var64 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var65 = var64.size();
        boolean var66 = var64.isEmpty();
        var64.removeAll();
        var64.removeAll();
        var64.removeAll();
        var64.removeAll();
        var64.removeAll();
        var64.add(0, (java.lang.Object) (byte) 1);
        boolean var75 = var64.isEmpty();
        boolean var76 = var64.isEmpty();
        var33.add(1, (java.lang.Object) var64);
        int var78 = var64.size();
        int var79 = var64.size();
        int var80 = var64.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var16.add(2, (java.lang.Object) var64);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var78 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var80 == 1);
        
    }
    
    public void test243() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test243");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.removeAll();
        int var17 = var14.size();
        var14.removeAll();
        boolean var19 = var14.isEmpty();
        boolean var20 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        int var25 = var22.size();
        var22.removeAll();
        var22.add(0, (java.lang.Object) 100L);
        int var30 = var22.size();
        var22.removeAll();
        int var32 = var22.size();
        var14.add(0, (java.lang.Object) var32);
        boolean var34 = var14.isEmpty();
        boolean var35 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var35);
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        var38.add(0, (java.lang.Object) var41);
        var41.add(0, (java.lang.Object) (-1.0d));
        var41.removeAll();
        boolean var49 = var41.isEmpty();
        int var50 = var41.size();
        boolean var51 = var41.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var54 = var53.isEmpty();
        var53.removeAll();
        var41.add(0, (java.lang.Object) var53);
        int var57 = var41.size();
        boolean var58 = var41.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var60 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var61 = var60.size();
        var60.removeAll();
        var60.removeAll();
        boolean var64 = var60.isEmpty();
        var41.add(1, (java.lang.Object) var60);
        var41.removeAll();
        int var67 = var41.size();
        var41.removeAll();
        var41.removeAll();
        var0.add(0, (java.lang.Object) var41);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0);
        
    }
    
    public void test244() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test244");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        java.lang.Object var25 = var0.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        int var34 = var27.size();
        int var35 = var27.size();
        var27.removeAll();
        var0.add(2, (java.lang.Object) var27);
        int var38 = var27.size();
        var27.removeAll();
        boolean var40 = var27.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var43 = var42.isEmpty();
        boolean var44 = var42.isEmpty();
        var42.removeAll();
        boolean var46 = var42.isEmpty();
        var42.removeAll();
        boolean var48 = var42.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        boolean var52 = var50.isEmpty();
        var50.removeAll();
        int var54 = var50.size();
        boolean var55 = var50.isEmpty();
        var50.removeAll();
        var42.add(0, (java.lang.Object) var50);
        ar.verificacion.validacion.treelistimplementation.TreeList var59 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var60 = var59.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var62 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var63 = var62.size();
        boolean var64 = var62.isEmpty();
        var59.add(0, (java.lang.Object) var62);
        var59.remove(0);
        var59.removeAll();
        var50.add(0, (java.lang.Object) var59);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var27.add(2, (java.lang.Object) var59);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + 100L + "'", var25.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
    }
    
    public void test245() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test245");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        boolean var15 = var0.isEmpty();
        int var16 = var0.size();
        boolean var17 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
    }
    
    public void test246() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test246");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        var7.add(0, (java.lang.Object) var10);
        var10.add(0, (java.lang.Object) (-1.0d));
        var10.removeAll();
        boolean var18 = var10.isEmpty();
        int var19 = var10.size();
        var10.removeAll();
        var10.removeAll();
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        int var24 = var0.size();
        int var25 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
    }
    
    public void test247() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test247");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        var8.add(0, (java.lang.Object) 100L);
        int var13 = var8.size();
        int var14 = var8.size();
        int var15 = var8.size();
        var8.removeAll();
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        int var19 = var8.size();
        int var20 = var8.size();
        var0.add(0, (java.lang.Object) var20);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var23 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
    }
    
    public void test248() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test248");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var14.removeAll();
        boolean var16 = var14.isEmpty();
        int var17 = var14.size();
        var14.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        boolean var27 = var24.isEmpty();
        boolean var28 = var24.isEmpty();
        var20.add(0, (java.lang.Object) var28);
        var14.add(0, (java.lang.Object) var20);
        int var31 = var20.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        boolean var35 = var33.isEmpty();
        var33.removeAll();
        int var37 = var33.size();
        boolean var38 = var33.isEmpty();
        boolean var39 = var33.isEmpty();
        boolean var40 = var33.isEmpty();
        var20.add(0, (java.lang.Object) var40);
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var43.removeAll();
        boolean var45 = var43.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var47 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var48 = var47.size();
        var47.removeAll();
        var47.removeAll();
        var43.add(0, (java.lang.Object) var47);
        boolean var52 = var43.isEmpty();
        boolean var53 = var43.isEmpty();
        boolean var54 = var43.isEmpty();
        var43.removeAll();
        var20.add(0, (java.lang.Object) var43);
        int var57 = var43.size();
        var43.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(1, (java.lang.Object) var43);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
    }
    
    public void test249() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test249");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        boolean var38 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        boolean var50 = var40.isEmpty();
        var40.removeAll();
        boolean var52 = var40.isEmpty();
        var32.add(1, (java.lang.Object) var40);
        var32.removeAll();
        var0.add(2, (java.lang.Object) var32);
        ar.verificacion.validacion.treelistimplementation.TreeList var57 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var58 = var57.size();
        var57.removeAll();
        int var60 = var57.size();
        var57.removeAll();
        var57.add(0, (java.lang.Object) 100L);
        var57.removeAll();
        var0.add(2, (java.lang.Object) var57);
        boolean var67 = var0.isEmpty();
        int var68 = var0.size();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 4);
        
    }
    
    public void test250() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test250");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        int var16 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
    }
    
    public void test251() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test251");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        boolean var31 = var24.isEmpty();
        int var32 = var24.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var24.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
    }
    
    public void test252() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test252");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        var12.add(0, (java.lang.Object) var15);
        var15.removeAll();
        boolean var20 = var15.isEmpty();
        var0.add(0, (java.lang.Object) var20);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
    }
    
    public void test253() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test253");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        boolean var3 = var0.isEmpty();
        int var4 = var0.size();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        var11.add(0, (java.lang.Object) 100L);
        int var16 = var11.size();
        int var17 = var11.size();
        int var18 = var11.size();
        int var19 = var11.size();
        var11.remove(0);
        int var22 = var11.size();
        boolean var23 = var11.isEmpty();
        int var24 = var11.size();
        var11.removeAll();
        int var26 = var11.size();
        var0.add(0, (java.lang.Object) var11);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var30.removeAll();
        var30.removeAll();
        var30.removeAll();
        var30.removeAll();
        var30.removeAll();
        int var38 = var30.size();
        boolean var39 = var30.isEmpty();
        int var40 = var30.size();
        var30.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var30);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
    }
    
    public void test254() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test254");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);
        
    }
    
    public void test255() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test255");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        boolean var16 = var13.isEmpty();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        var13.removeAll();
        var13.removeAll();
        int var22 = var13.size();
        int var23 = var13.size();
        int var24 = var13.size();
        boolean var25 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        var13.removeAll();
        boolean var28 = var13.isEmpty();
        boolean var29 = var13.isEmpty();
        var13.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        boolean var34 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        boolean var39 = var36.isEmpty();
        boolean var40 = var36.isEmpty();
        var32.add(0, (java.lang.Object) var40);
        boolean var42 = var32.isEmpty();
        java.lang.Object var44 = var32.get(0);
        var32.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var48 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var49 = var48.size();
        boolean var50 = var48.isEmpty();
        var48.removeAll();
        int var52 = var48.size();
        boolean var53 = var48.isEmpty();
        boolean var54 = var48.isEmpty();
        boolean var55 = var48.isEmpty();
        var32.add(0, (java.lang.Object) var55);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var13.add(10, (java.lang.Object) var32);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var44 + "' != '" + true + "'", var44.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
    }
    
    public void test256() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test256");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.add(0, (java.lang.Object) 100L);
        int var34 = var29.size();
        boolean var35 = var29.isEmpty();
        boolean var36 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var36);
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        var39.add(0, (java.lang.Object) 100L);
        int var44 = var39.size();
        int var45 = var39.size();
        int var46 = var39.size();
        var39.removeAll();
        boolean var48 = var39.isEmpty();
        boolean var49 = var39.isEmpty();
        var26.add(1, (java.lang.Object) var49);
        int var51 = var26.size();
        int var52 = var26.size();
        var0.add(0, (java.lang.Object) var52);
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        var55.add(0, (java.lang.Object) 100L);
        int var60 = var55.size();
        int var61 = var55.size();
        int var62 = var55.size();
        java.lang.Object var64 = var55.get(0);
        int var65 = var55.size();
        var55.removeAll();
        boolean var67 = var55.isEmpty();
        boolean var68 = var55.isEmpty();
        var0.add(1, (java.lang.Object) var68);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var64 + "' != '" + 100L + "'", var64.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);
        
    }
    
    public void test257() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test257");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        boolean var27 = var24.isEmpty();
        boolean var28 = var24.isEmpty();
        var20.add(0, (java.lang.Object) var28);
        boolean var30 = var20.isEmpty();
        boolean var31 = var20.isEmpty();
        boolean var32 = var20.isEmpty();
        var0.add(0, (java.lang.Object) var32);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        boolean var43 = var40.isEmpty();
        boolean var44 = var40.isEmpty();
        var36.add(0, (java.lang.Object) var44);
        boolean var46 = var36.isEmpty();
        var36.removeAll();
        boolean var48 = var36.isEmpty();
        int var49 = var36.size();
        var36.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var52.removeAll();
        boolean var54 = var52.isEmpty();
        int var55 = var52.size();
        boolean var56 = var52.isEmpty();
        boolean var57 = var52.isEmpty();
        int var58 = var52.size();
        int var59 = var52.size();
        int var60 = var52.size();
        boolean var61 = var52.isEmpty();
        int var62 = var52.size();
        var36.add(0, (java.lang.Object) var52);
        boolean var64 = var52.isEmpty();
        boolean var65 = var52.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var67 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var68 = var67.size();
        boolean var69 = var67.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var71 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var72 = var71.size();
        boolean var73 = var71.isEmpty();
        boolean var74 = var71.isEmpty();
        boolean var75 = var71.isEmpty();
        var67.add(0, (java.lang.Object) var75);
        boolean var77 = var67.isEmpty();
        var67.removeAll();
        int var79 = var67.size();
        var67.removeAll();
        var52.add(0, (java.lang.Object) var67);
        int var82 = var52.size();
        var0.add(0, (java.lang.Object) var52);
        ar.verificacion.validacion.treelistimplementation.TreeList var85 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var85.removeAll();
        boolean var87 = var85.isEmpty();
        int var88 = var85.size();
        var85.removeAll();
        boolean var90 = var85.isEmpty();
        boolean var91 = var85.isEmpty();
        boolean var92 = var85.isEmpty();
        boolean var93 = var85.isEmpty();
        var85.removeAll();
        boolean var95 = var85.isEmpty();
        var52.add(0, (java.lang.Object) var85);
        int var97 = var85.size();
        int var98 = var85.size();
        int var99 = var85.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var88 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var90 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var91 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var92 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var93 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var95 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var97 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var98 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var99 == 0);
        
    }
    
    public void test258() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test258");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.add(0, (java.lang.Object) 100L);
        int var29 = var24.size();
        int var30 = var24.size();
        var24.removeAll();
        int var32 = var24.size();
        var24.removeAll();
        int var34 = var24.size();
        var24.removeAll();
        var24.removeAll();
        var3.add(2, (java.lang.Object) var24);
        int var38 = var3.size();
        var3.removeAll();
        var3.removeAll();
        boolean var41 = var3.isEmpty();
        var3.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
    }
    
    public void test259() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test259");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
    }
    
    public void test260() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test260");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        int var21 = var17.size();
        boolean var22 = var17.isEmpty();
        var17.removeAll();
        var17.removeAll();
        var3.add(0, (java.lang.Object) var17);
        java.lang.Object var27 = var3.get(0);
        int var28 = var3.size();
        var3.removeAll();
        var3.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        var35.add(0, (java.lang.Object) 100L);
        int var40 = var35.size();
        boolean var41 = var35.isEmpty();
        boolean var42 = var35.isEmpty();
        var32.add(0, (java.lang.Object) var42);
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var46 = var45.size();
        var45.add(0, (java.lang.Object) 100L);
        int var50 = var45.size();
        int var51 = var45.size();
        int var52 = var45.size();
        var45.removeAll();
        boolean var54 = var45.isEmpty();
        boolean var55 = var45.isEmpty();
        var32.add(1, (java.lang.Object) var55);
        var32.add(0, (java.lang.Object) 'a');
        int var60 = var32.size();
        var32.removeAll();
        boolean var62 = var32.isEmpty();
        int var63 = var32.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(2, (java.lang.Object) var63);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
    }
    
    public void test261() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test261");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        boolean var12 = var3.isEmpty();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        var3.removeAll();
        boolean var16 = var3.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
    }
    
    public void test262() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test262");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        boolean var15 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        boolean var23 = var21.isEmpty();
        boolean var24 = var21.isEmpty();
        boolean var25 = var21.isEmpty();
        var17.add(0, (java.lang.Object) var25);
        boolean var27 = var17.isEmpty();
        boolean var28 = var17.isEmpty();
        boolean var29 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        boolean var33 = var31.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        boolean var37 = var35.isEmpty();
        boolean var38 = var35.isEmpty();
        boolean var39 = var35.isEmpty();
        var31.add(0, (java.lang.Object) var39);
        boolean var41 = var31.isEmpty();
        var31.removeAll();
        boolean var43 = var31.isEmpty();
        var17.add(0, (java.lang.Object) var31);
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var47 = var46.size();
        var46.add(0, (java.lang.Object) 100L);
        int var51 = var46.size();
        int var52 = var46.size();
        int var53 = var46.size();
        var46.removeAll();
        boolean var55 = var46.isEmpty();
        boolean var56 = var46.isEmpty();
        int var57 = var46.size();
        var46.removeAll();
        int var59 = var46.size();
        boolean var60 = var46.isEmpty();
        var46.removeAll();
        var17.add(1, (java.lang.Object) var46);
        boolean var63 = var46.isEmpty();
        var0.add(0, (java.lang.Object) var63);
        boolean var65 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == false);
        
    }
    
    public void test263() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test263");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        var0.removeAll();
        int var14 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var17 = var0.size();
        int var18 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
    }
    
    public void test264() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test264");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        var11.removeAll();
        var11.removeAll();
        boolean var27 = var11.isEmpty();
        int var28 = var11.size();
        int var29 = var11.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var31 = var11.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
    }
    
    public void test265() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test265");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
    }
    
    public void test266() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test266");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var10.remove(0);
        var10.removeAll();
        int var20 = var10.size();
        int var21 = var10.size();
        var0.add(0, (java.lang.Object) var10);
        boolean var23 = var10.isEmpty();
        var10.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
    }
    
    public void test267() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test267");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        boolean var18 = var14.isEmpty();
        var10.add(0, (java.lang.Object) var18);
        boolean var20 = var10.isEmpty();
        boolean var21 = var10.isEmpty();
        boolean var22 = var10.isEmpty();
        java.lang.Object var24 = var10.get(0);
        boolean var25 = var10.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        int var27 = var10.size();
        boolean var28 = var10.isEmpty();
        int var29 = var10.size();
        boolean var30 = var10.isEmpty();
        java.lang.Object var32 = var10.get(0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + true + "'", var24.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var32 + "' != '" + true + "'", var32.equals(true));
        
    }
    
    public void test268() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test268");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
    }
    
    public void test269() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test269");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        int var34 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        var36.removeAll();
        var36.removeAll();
        var36.removeAll();
        var36.add(0, (java.lang.Object) 0L);
        int var45 = var36.size();
        var36.removeAll();
        boolean var47 = var36.isEmpty();
        int var48 = var36.size();
        boolean var49 = var36.isEmpty();
        var36.removeAll();
        boolean var51 = var36.isEmpty();
        boolean var52 = var36.isEmpty();
        var0.add(1, (java.lang.Object) var36);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var55 = var36.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 4);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
    }
    
    public void test270() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test270");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        int var25 = var22.size();
        boolean var26 = var22.isEmpty();
        int var27 = var22.size();
        boolean var28 = var22.isEmpty();
        var0.add(1, (java.lang.Object) var22);
        int var30 = var22.size();
        boolean var31 = var22.isEmpty();
        var22.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var22.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
    }
    
    public void test271() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test271");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        int var9 = var0.size();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        var15.add(0, (java.lang.Object) 100L);
        int var20 = var15.size();
        boolean var21 = var15.isEmpty();
        boolean var22 = var15.isEmpty();
        int var23 = var15.size();
        var15.remove(0);
        var15.removeAll();
        var15.removeAll();
        boolean var28 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var31 = var30.isEmpty();
        var30.removeAll();
        int var33 = var30.size();
        var30.removeAll();
        var15.add(0, (java.lang.Object) var30);
        java.lang.Object var37 = var15.get(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) 0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);
        
    }
    
    public void test272() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test272");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.remove(0);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        var11.add(0, (java.lang.Object) 100L);
        int var16 = var11.size();
        int var17 = var11.size();
        var11.removeAll();
        int var19 = var11.size();
        var11.removeAll();
        int var21 = var11.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        var23.removeAll();
        int var26 = var23.size();
        var23.removeAll();
        var23.add(0, (java.lang.Object) 100L);
        int var31 = var23.size();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        boolean var34 = var23.isEmpty();
        var23.removeAll();
        boolean var36 = var23.isEmpty();
        boolean var37 = var23.isEmpty();
        var0.add(0, (java.lang.Object) var23);
        boolean var39 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        var41.removeAll();
        var41.removeAll();
        var41.removeAll();
        var41.add(0, (java.lang.Object) 0L);
        int var50 = var41.size();
        var41.removeAll();
        boolean var52 = var41.isEmpty();
        int var53 = var41.size();
        boolean var54 = var41.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(5, (java.lang.Object) var41);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
    }
    
    public void test273() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test273");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        var3.removeAll();
        int var20 = var3.size();
        boolean var21 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        var23.add(0, (java.lang.Object) 100L);
        int var28 = var23.size();
        int var29 = var23.size();
        int var30 = var23.size();
        boolean var31 = var23.isEmpty();
        int var32 = var23.size();
        boolean var33 = var23.isEmpty();
        int var34 = var23.size();
        var3.add(0, (java.lang.Object) var23);
        var23.removeAll();
        int var37 = var23.size();
        int var38 = var23.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var23.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
    }
    
    public void test274() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test274");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var29);
        var26.removeAll();
        var26.removeAll();
        int var35 = var26.size();
        boolean var36 = var26.isEmpty();
        var3.add(2, (java.lang.Object) var36);
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        boolean var41 = var39.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var44 = var43.size();
        boolean var45 = var43.isEmpty();
        boolean var46 = var43.isEmpty();
        boolean var47 = var43.isEmpty();
        var39.add(0, (java.lang.Object) var47);
        var39.removeAll();
        var39.removeAll();
        var3.add(3, (java.lang.Object) var39);
        int var52 = var3.size();
        boolean var53 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        boolean var57 = var55.isEmpty();
        boolean var58 = var55.isEmpty();
        boolean var59 = var55.isEmpty();
        var55.removeAll();
        int var61 = var55.size();
        boolean var62 = var55.isEmpty();
        var55.removeAll();
        int var64 = var55.size();
        var3.add(2, (java.lang.Object) var64);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 4);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
    }
    
    public void test275() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test275");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
    }
    
    public void test276() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test276");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        int var5 = var0.size();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test277() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test277");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        java.lang.Object var30 = var0.get(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        int var38 = var32.size();
        int var39 = var32.size();
        var32.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        var42.add(0, (java.lang.Object) 100L);
        int var47 = var42.size();
        var42.remove(0);
        var42.removeAll();
        var32.add(0, (java.lang.Object) var42);
        boolean var52 = var42.isEmpty();
        var42.removeAll();
        int var54 = var42.size();
        var0.add(0, (java.lang.Object) var54);
        boolean var56 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var59 = var58.size();
        var58.removeAll();
        int var61 = var58.size();
        boolean var62 = var58.isEmpty();
        var58.removeAll();
        var58.removeAll();
        var58.removeAll();
        var0.add(3, (java.lang.Object) var58);
        boolean var67 = var0.isEmpty();
        int var68 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var30 + "' != '" + true + "'", var30.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 5);
        
    }
    
    public void test278() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test278");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test279() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test279");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        boolean var23 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        boolean var27 = var25.isEmpty();
        var25.removeAll();
        var25.removeAll();
        var25.removeAll();
        int var31 = var25.size();
        boolean var32 = var25.isEmpty();
        var25.removeAll();
        boolean var34 = var25.isEmpty();
        var25.removeAll();
        var25.removeAll();
        var3.add(2, (java.lang.Object) var25);
        int var38 = var25.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
    }
    
    public void test280() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test280");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
    }
    
    public void test281() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test281");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var29);
        var26.removeAll();
        var26.removeAll();
        int var35 = var26.size();
        boolean var36 = var26.isEmpty();
        var3.add(2, (java.lang.Object) var36);
        var3.remove(1);
        boolean var40 = var3.isEmpty();
        var3.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
    }
    
    public void test282() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test282");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        var13.removeAll();
        boolean var21 = var13.isEmpty();
        int var22 = var13.size();
        boolean var23 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var26 = var25.isEmpty();
        var25.removeAll();
        var13.add(0, (java.lang.Object) var25);
        int var29 = var13.size();
        boolean var30 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.removeAll();
        var32.removeAll();
        boolean var36 = var32.isEmpty();
        var13.add(1, (java.lang.Object) var32);
        boolean var38 = var13.isEmpty();
        var13.remove(0);
        var13.removeAll();
        var13.removeAll();
        var13.removeAll();
        boolean var44 = var13.isEmpty();
        boolean var45 = var13.isEmpty();
        var13.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var13);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
    }
    
    public void test283() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test283");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 0L);
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
    }
    
    public void test284() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test284");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var9 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
    }
    
    public void test285() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test285");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        boolean var27 = var24.isEmpty();
        boolean var28 = var24.isEmpty();
        var20.add(0, (java.lang.Object) var28);
        boolean var30 = var20.isEmpty();
        boolean var31 = var20.isEmpty();
        boolean var32 = var20.isEmpty();
        var0.add(0, (java.lang.Object) var32);
        int var34 = var0.size();
        int var35 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var37 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
    }
    
    public void test286() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test286");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var13 = var12.isEmpty();
        boolean var14 = var12.isEmpty();
        var12.removeAll();
        var12.add(0, (java.lang.Object) 1.0d);
        int var19 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var0.add(0, (java.lang.Object) var12);
        int var23 = var12.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
    }
    
    public void test287() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test287");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var14 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
    }
    
    public void test288() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test288");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        var0.removeAll();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var18 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test289() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test289");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        int var5 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
    }
    
    public void test290() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test290");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        int var9 = var0.size();
        int var10 = var0.size();
        int var11 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var13 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
    }
    
    public void test291() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test291");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        int var13 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        int var18 = var15.size();
        var15.removeAll();
        boolean var20 = var15.isEmpty();
        int var21 = var15.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var21);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
    }
    
    public void test292() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test292");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        int var29 = var26.size();
        var26.removeAll();
        var3.add(2, (java.lang.Object) var26);
        int var32 = var3.size();
        var3.remove(0);
        boolean var35 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        var37.add(0, (java.lang.Object) 100L);
        int var42 = var37.size();
        int var43 = var37.size();
        java.lang.Object var45 = var37.get(0);
        var37.remove(0);
        var37.removeAll();
        boolean var49 = var37.isEmpty();
        var3.add(1, (java.lang.Object) var49);
        boolean var51 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var54 = var53.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var56 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var57 = var56.size();
        boolean var58 = var56.isEmpty();
        var53.add(0, (java.lang.Object) var56);
        var56.add(0, (java.lang.Object) (-1.0d));
        var56.removeAll();
        boolean var64 = var56.isEmpty();
        int var65 = var56.size();
        boolean var66 = var56.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var68 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var68.removeAll();
        boolean var70 = var68.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var72 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var73 = var72.size();
        var72.removeAll();
        var72.removeAll();
        var68.add(0, (java.lang.Object) var72);
        var56.add(0, (java.lang.Object) var72);
        var72.removeAll();
        int var79 = var72.size();
        var3.add(1, (java.lang.Object) var79);
        boolean var81 = var3.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var45 + "' != '" + 100L + "'", var45.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var81 == false);
        
    }
    
    public void test293() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test293");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.remove(0);
        int var16 = var0.size();
        var0.removeAll();
        int var18 = var0.size();
        boolean var19 = var0.isEmpty();
        int var20 = var0.size();
        boolean var21 = var0.isEmpty();
        boolean var22 = var0.isEmpty();
        boolean var23 = var0.isEmpty();
        boolean var24 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
    }
    
    public void test294() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test294");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        int var16 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var19 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        boolean var23 = var21.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        boolean var27 = var25.isEmpty();
        boolean var28 = var25.isEmpty();
        boolean var29 = var25.isEmpty();
        var21.add(0, (java.lang.Object) var29);
        boolean var31 = var21.isEmpty();
        boolean var32 = var21.isEmpty();
        boolean var33 = var21.isEmpty();
        int var34 = var21.size();
        var21.remove(0);
        int var37 = var21.size();
        boolean var38 = var21.isEmpty();
        int var39 = var21.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        var41.add(0, (java.lang.Object) 100L);
        int var46 = var41.size();
        int var47 = var41.size();
        int var48 = var41.size();
        java.lang.Object var50 = var41.get(0);
        int var51 = var41.size();
        int var52 = var41.size();
        var41.removeAll();
        var21.add(0, (java.lang.Object) var41);
        boolean var55 = var21.isEmpty();
        boolean var56 = var21.isEmpty();
        int var57 = var21.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(1, (java.lang.Object) var57);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + 100L + "'", var50.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
    }
    
    public void test295() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test295");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var28.removeAll();
        boolean var30 = var28.isEmpty();
        int var31 = var28.size();
        var28.add(0, (java.lang.Object) 1L);
        int var35 = var28.size();
        boolean var36 = var28.isEmpty();
        var28.removeAll();
        var28.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var28);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
    }
    
    public void test296() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test296");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        int var25 = var22.size();
        boolean var26 = var22.isEmpty();
        boolean var27 = var22.isEmpty();
        int var28 = var22.size();
        int var29 = var22.size();
        int var30 = var22.size();
        boolean var31 = var22.isEmpty();
        var22.removeAll();
        boolean var33 = var22.isEmpty();
        var22.removeAll();
        var13.add(1, (java.lang.Object) var22);
        int var36 = var22.size();
        var22.removeAll();
        var22.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var22);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
    }
    
    public void test297() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test297");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 0L);
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        int var14 = var0.size();
        var0.removeAll();
        int var16 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var18 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
    }
    
    public void test298() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test298");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        var0.remove(0);
        boolean var11 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.removeAll();
        int var16 = var13.size();
        var13.removeAll();
        var13.add(0, (java.lang.Object) 100L);
        int var21 = var13.size();
        var13.removeAll();
        boolean var23 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        boolean var27 = var25.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        boolean var32 = var29.isEmpty();
        boolean var33 = var29.isEmpty();
        var25.add(0, (java.lang.Object) var33);
        boolean var35 = var25.isEmpty();
        boolean var36 = var25.isEmpty();
        boolean var37 = var25.isEmpty();
        int var38 = var25.size();
        var25.remove(0);
        int var41 = var25.size();
        var25.removeAll();
        var13.add(0, (java.lang.Object) var25);
        var0.add(0, (java.lang.Object) 0);
        int var45 = var0.size();
        int var46 = var0.size();
        int var47 = var0.size();
        var0.removeAll();
        boolean var49 = var0.isEmpty();
        int var50 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var52 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
    }
    
    public void test299() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test299");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        var3.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        int var21 = var14.size();
        int var22 = var14.size();
        var14.remove(0);
        int var25 = var14.size();
        int var26 = var14.size();
        var3.add(0, (java.lang.Object) var26);
        boolean var28 = var3.isEmpty();
        var3.removeAll();
        var3.removeAll();
        int var31 = var3.size();
        var3.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
    }
    
    public void test300() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test300");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.remove(0);
        var0.removeAll();
        int var10 = var0.size();
        int var11 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test301() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test301");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        int var29 = var26.size();
        var26.removeAll();
        var3.add(2, (java.lang.Object) var26);
        int var32 = var3.size();
        var3.remove(0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var36 = var3.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 3);
        
    }
    
    public void test302() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test302");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        int var15 = var12.size();
        var12.add(0, (java.lang.Object) 1L);
        int var19 = var12.size();
        var0.add(0, (java.lang.Object) var12);
        boolean var21 = var12.isEmpty();
        int var22 = var12.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var24 = var12.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
    }
    
    public void test303() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test303");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        var0.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var23.removeAll();
        boolean var25 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        var27.removeAll();
        var27.removeAll();
        var23.add(0, (java.lang.Object) var27);
        var27.removeAll();
        var27.removeAll();
        boolean var34 = var27.isEmpty();
        var27.removeAll();
        var0.add(0, (java.lang.Object) var27);
        boolean var37 = var27.isEmpty();
        boolean var38 = var27.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
    }
    
    public void test304() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test304");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        var3.removeAll();
        var3.removeAll();
        boolean var15 = var3.isEmpty();
        boolean var16 = var3.isEmpty();
        int var17 = var3.size();
        boolean var18 = var3.isEmpty();
        var3.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
    }
    
    public void test305() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test305");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test306() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test306");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.add(0, (java.lang.Object) 100L);
        int var34 = var29.size();
        boolean var35 = var29.isEmpty();
        boolean var36 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var36);
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        var39.add(0, (java.lang.Object) 100L);
        int var44 = var39.size();
        int var45 = var39.size();
        int var46 = var39.size();
        var39.removeAll();
        boolean var48 = var39.isEmpty();
        boolean var49 = var39.isEmpty();
        var26.add(1, (java.lang.Object) var49);
        int var51 = var26.size();
        int var52 = var26.size();
        var0.add(0, (java.lang.Object) var52);
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        var55.add(0, (java.lang.Object) 100L);
        int var60 = var55.size();
        int var61 = var55.size();
        int var62 = var55.size();
        java.lang.Object var64 = var55.get(0);
        int var65 = var55.size();
        var55.removeAll();
        boolean var67 = var55.isEmpty();
        boolean var68 = var55.isEmpty();
        var0.add(1, (java.lang.Object) var68);
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var72 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var64 + "' != '" + 100L + "'", var64.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);
        
    }
    
    public void test307() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test307");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        int var5 = var0.size();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        var11.add(0, (java.lang.Object) var14);
        int var18 = var14.size();
        boolean var19 = var14.isEmpty();
        var14.removeAll();
        var14.removeAll();
        var14.removeAll();
        var14.removeAll();
        int var24 = var14.size();
        var0.add(0, (java.lang.Object) var24);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        boolean var29 = var27.isEmpty();
        var27.removeAll();
        var27.removeAll();
        var27.removeAll();
        boolean var33 = var27.isEmpty();
        boolean var34 = var27.isEmpty();
        var27.removeAll();
        int var36 = var27.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) var36);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
    }
    
    public void test308() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test308");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        boolean var16 = var0.isEmpty();
        int var17 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test309() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test309");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        boolean var20 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        boolean var28 = var26.isEmpty();
        boolean var29 = var26.isEmpty();
        boolean var30 = var26.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        boolean var32 = var22.isEmpty();
        var22.removeAll();
        boolean var34 = var22.isEmpty();
        var14.add(1, (java.lang.Object) var22);
        var0.add(1, (java.lang.Object) 1);
        boolean var37 = var0.isEmpty();
        boolean var38 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        int var50 = var40.size();
        int var51 = var40.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var54 = var53.size();
        boolean var55 = var53.isEmpty();
        boolean var56 = var53.isEmpty();
        boolean var57 = var53.isEmpty();
        boolean var58 = var53.isEmpty();
        var53.removeAll();
        var53.removeAll();
        var53.removeAll();
        int var62 = var53.size();
        int var63 = var53.size();
        int var64 = var53.size();
        boolean var65 = var53.isEmpty();
        var40.add(1, (java.lang.Object) var53);
        var53.removeAll();
        int var68 = var53.size();
        var53.removeAll();
        var0.add(2, (java.lang.Object) var53);
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 0);
        
    }
    
    public void test310() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test310");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        int var14 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.add(0, (java.lang.Object) 100L);
        int var21 = var16.size();
        int var22 = var16.size();
        int var23 = var16.size();
        var16.add(1, (java.lang.Object) 1.0d);
        int var27 = var16.size();
        var16.removeAll();
        int var29 = var16.size();
        var16.removeAll();
        int var31 = var16.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var16);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + (byte) 1 + "'",
                var9.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
    }
    
    public void test311() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test311");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var11.removeAll();
        int var13 = var11.size();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        boolean var17 = var0.isEmpty();
        int var18 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.removeAll();
        int var23 = var20.size();
        var20.removeAll();
        var20.add(0, (java.lang.Object) 100L);
        int var28 = var20.size();
        var20.removeAll();
        boolean var30 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        boolean var34 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        boolean var39 = var36.isEmpty();
        boolean var40 = var36.isEmpty();
        var32.add(0, (java.lang.Object) var40);
        boolean var42 = var32.isEmpty();
        boolean var43 = var32.isEmpty();
        boolean var44 = var32.isEmpty();
        int var45 = var32.size();
        var32.remove(0);
        int var48 = var32.size();
        var32.removeAll();
        var20.add(0, (java.lang.Object) var32);
        int var51 = var20.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var54 = var53.size();
        boolean var55 = var53.isEmpty();
        boolean var56 = var53.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var58.removeAll();
        boolean var60 = var58.isEmpty();
        int var61 = var58.size();
        var58.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var66 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var67 = var66.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var69 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var70 = var69.size();
        boolean var71 = var69.isEmpty();
        var66.add(0, (java.lang.Object) var69);
        var69.add(0, (java.lang.Object) (-1.0d));
        var69.removeAll();
        boolean var77 = var69.isEmpty();
        int var78 = var69.size();
        boolean var79 = var69.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var81 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var82 = var81.isEmpty();
        var81.removeAll();
        var69.add(0, (java.lang.Object) var81);
        var81.removeAll();
        var58.add(0, (java.lang.Object) var81);
        var53.add(0, (java.lang.Object) var58);
        var20.add(0, (java.lang.Object) 0);
        boolean var89 = var20.isEmpty();
        java.lang.Object var91 = var20.get(1);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var20);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var78 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var91);
        
    }
    
    public void test312() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test312");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        int var21 = var14.size();
        boolean var22 = var14.isEmpty();
        var14.removeAll();
        var14.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        boolean var29 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        var31.add(0, (java.lang.Object) var34);
        var34.add(0, (java.lang.Object) (-1.0d));
        var34.removeAll();
        boolean var42 = var34.isEmpty();
        int var43 = var34.size();
        boolean var44 = var34.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var47 = var46.isEmpty();
        var46.removeAll();
        var34.add(0, (java.lang.Object) var46);
        var34.removeAll();
        int var51 = var34.size();
        boolean var52 = var34.isEmpty();
        int var53 = var34.size();
        var26.add(0, (java.lang.Object) var34);
        boolean var55 = var26.isEmpty();
        var14.add(0, (java.lang.Object) var26);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var14);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
    }
    
    public void test313() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test313");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        var0.removeAll();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test314() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test314");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test315() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test315");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        int var10 = var0.size();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test316() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test316");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        boolean var38 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        boolean var50 = var40.isEmpty();
        var40.removeAll();
        boolean var52 = var40.isEmpty();
        var32.add(1, (java.lang.Object) var40);
        var32.removeAll();
        var0.add(2, (java.lang.Object) var32);
        int var56 = var32.size();
        int var57 = var32.size();
        boolean var58 = var32.isEmpty();
        int var59 = var32.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var61 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var62 = var61.isEmpty();
        boolean var63 = var61.isEmpty();
        var61.removeAll();
        boolean var65 = var61.isEmpty();
        var61.removeAll();
        boolean var67 = var61.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var69 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var70 = var69.size();
        boolean var71 = var69.isEmpty();
        var69.removeAll();
        int var73 = var69.size();
        boolean var74 = var69.isEmpty();
        var69.removeAll();
        var61.add(0, (java.lang.Object) var69);
        var69.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var32.add(4, (java.lang.Object) var69);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
    }
    
    public void test317() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test317");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        java.lang.Object var14 = var0.get(0);
        var0.removeAll();
        int var16 = var0.size();
        int var17 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test318() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test318");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        var0.remove(0);
        boolean var22 = var0.isEmpty();
        var0.removeAll();
        int var24 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.add(0, (java.lang.Object) 100L);
        int var31 = var26.size();
        boolean var32 = var26.isEmpty();
        boolean var33 = var26.isEmpty();
        var26.remove(0);
        var26.removeAll();
        var26.removeAll();
        boolean var38 = var26.isEmpty();
        var26.removeAll();
        boolean var40 = var26.isEmpty();
        boolean var41 = var26.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var26);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
    }
    
    public void test319() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test319");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.add(0, (java.lang.Object) 100L);
        int var21 = var16.size();
        boolean var22 = var16.isEmpty();
        boolean var23 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var23);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.add(0, (java.lang.Object) 100L);
        int var31 = var26.size();
        int var32 = var26.size();
        int var33 = var26.size();
        var26.removeAll();
        boolean var35 = var26.isEmpty();
        boolean var36 = var26.isEmpty();
        var13.add(1, (java.lang.Object) var36);
        var13.add(0, (java.lang.Object) 'a');
        int var41 = var13.size();
        java.lang.Object var43 = var13.get(0);
        var13.remove(2);
        int var46 = var13.size();
        var13.removeAll();
        var0.add(0, (java.lang.Object) var13);
        boolean var49 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var51 = var0.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var43 + "' != '" + 'a' + "'", var43.equals('a'));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == false);
        
    }
    
    public void test320() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test320");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        int var14 = var0.size();
        int var15 = var0.size();
        var0.removeAll();
        int var17 = var0.size();
        int var18 = var0.size();
        int var19 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var21 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
    }
    
    public void test321() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test321");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var0.isEmpty();
        var0.removeAll();
        int var30 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
    }
    
    public void test322() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test322");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test323() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test323");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.add(0, (java.lang.Object) 10L);
        var0.remove(0);
        int var14 = var0.size();
        boolean var15 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
    }
    
    public void test324() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test324");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
    }
    
    public void test325() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test325");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        var0.removeAll();
        int var8 = var0.size();
        var0.removeAll();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        int var15 = var12.size();
        var12.removeAll();
        var12.add(0, (java.lang.Object) 100L);
        int var20 = var12.size();
        var12.removeAll();
        var0.add(0, (java.lang.Object) var12);
        boolean var23 = var12.isEmpty();
        var12.removeAll();
        boolean var25 = var12.isEmpty();
        int var26 = var12.size();
        boolean var27 = var12.isEmpty();
        var12.removeAll();
        boolean var29 = var12.isEmpty();
        int var30 = var12.size();
        boolean var31 = var12.isEmpty();
        int var32 = var12.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var35 = var34.isEmpty();
        boolean var36 = var34.isEmpty();
        var34.removeAll();
        var34.add(0, (java.lang.Object) 1.0d);
        int var41 = var34.size();
        var34.removeAll();
        boolean var43 = var34.isEmpty();
        int var44 = var34.size();
        var34.removeAll();
        var34.removeAll();
        int var47 = var34.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var12.add(3, (java.lang.Object) var34);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
    }
    
    public void test326() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test326");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        int var10 = var0.size();
        java.lang.Object var12 = var0.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var15 = var14.isEmpty();
        boolean var16 = var14.isEmpty();
        var14.removeAll();
        boolean var18 = var14.isEmpty();
        var14.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(5, (java.lang.Object) var14);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var12 + "' != '" + (byte) 1 + "'",
                var12.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
    }
    
    public void test327() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test327");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        boolean var20 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        boolean var28 = var26.isEmpty();
        boolean var29 = var26.isEmpty();
        boolean var30 = var26.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        boolean var32 = var22.isEmpty();
        var22.removeAll();
        boolean var34 = var22.isEmpty();
        var14.add(1, (java.lang.Object) var22);
        var0.add(1, (java.lang.Object) 1);
        boolean var37 = var0.isEmpty();
        boolean var38 = var0.isEmpty();
        int var39 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        var41.add(0, (java.lang.Object) 100L);
        int var46 = var41.size();
        var41.remove(0);
        boolean var49 = var41.isEmpty();
        int var50 = var41.size();
        var0.add(1, (java.lang.Object) var50);
        boolean var52 = var0.isEmpty();
        var0.removeAll();
        boolean var54 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
    }
    
    public void test328() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test328");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        boolean var19 = var16.isEmpty();
        boolean var20 = var16.isEmpty();
        var12.add(0, (java.lang.Object) var20);
        boolean var22 = var12.isEmpty();
        var12.removeAll();
        boolean var24 = var12.isEmpty();
        boolean var25 = var12.isEmpty();
        boolean var26 = var12.isEmpty();
        var12.removeAll();
        boolean var28 = var12.isEmpty();
        boolean var29 = var12.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var29);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
    }
    
    public void test329() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test329");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        int var26 = var14.size();
        var14.removeAll();
        int var28 = var14.size();
        int var29 = var14.size();
        boolean var30 = var14.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var30);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
    }
    
    public void test330() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test330");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        boolean var20 = var17.isEmpty();
        boolean var21 = var17.isEmpty();
        var13.add(0, (java.lang.Object) var21);
        boolean var23 = var13.isEmpty();
        var13.removeAll();
        boolean var25 = var13.isEmpty();
        int var26 = var13.size();
        var13.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        int var32 = var29.size();
        boolean var33 = var29.isEmpty();
        boolean var34 = var29.isEmpty();
        int var35 = var29.size();
        int var36 = var29.size();
        int var37 = var29.size();
        boolean var38 = var29.isEmpty();
        int var39 = var29.size();
        var13.add(0, (java.lang.Object) var29);
        boolean var41 = var29.isEmpty();
        boolean var42 = var29.isEmpty();
        boolean var43 = var29.isEmpty();
        var29.removeAll();
        int var45 = var29.size();
        var0.add(0, (java.lang.Object) var45);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
    }
    
    public void test331() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test331");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        var3.removeAll();
        boolean var12 = var3.isEmpty();
        int var13 = var3.size();
        boolean var14 = var3.isEmpty();
        int var15 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test332() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test332");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        var3.removeAll();
        var3.removeAll();
        var3.removeAll();
        var3.removeAll();
        boolean var16 = var3.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
    }
    
    public void test333() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test333");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        int var20 = var13.size();
        int var21 = var13.size();
        var13.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var24.removeAll();
        boolean var26 = var24.isEmpty();
        int var27 = var24.size();
        var24.removeAll();
        int var29 = var24.size();
        boolean var30 = var24.isEmpty();
        boolean var31 = var24.isEmpty();
        int var32 = var24.size();
        var13.add(0, (java.lang.Object) var24);
        var0.add(0, (java.lang.Object) var24);
        boolean var35 = var24.isEmpty();
        boolean var36 = var24.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
    }
    
    public void test334() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test334");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var12 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
    }
    
    public void test335() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test335");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        int var5 = var0.size();
        var0.removeAll();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var11 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test336() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test336");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        var0.removeAll();
        int var14 = var0.size();
        int var15 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test337() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test337");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        boolean var37 = var34.isEmpty();
        boolean var38 = var34.isEmpty();
        var30.add(0, (java.lang.Object) var38);
        boolean var40 = var30.isEmpty();
        var30.removeAll();
        int var42 = var30.size();
        var30.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var45.removeAll();
        boolean var47 = var45.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var49 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var50 = var49.size();
        var49.removeAll();
        var49.removeAll();
        var45.add(0, (java.lang.Object) var49);
        boolean var54 = var45.isEmpty();
        boolean var55 = var45.isEmpty();
        boolean var56 = var45.isEmpty();
        var45.removeAll();
        var30.add(0, (java.lang.Object) var45);
        var45.removeAll();
        var45.removeAll();
        var45.removeAll();
        boolean var62 = var45.isEmpty();
        int var63 = var45.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var16.add(4, (java.lang.Object) var63);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
    }
    
    public void test338() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test338");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var9 = var8.isEmpty();
        var8.removeAll();
        int var11 = var8.size();
        var8.removeAll();
        var8.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var17 = var8.get(0);
        int var18 = var8.size();
        int var19 = var8.size();
        var8.remove(0);
        var0.add(0, (java.lang.Object) var8);
        boolean var23 = var8.isEmpty();
        boolean var24 = var8.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var8.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var17 + "' != '" + (byte) 1 + "'",
                var17.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
    }
    
    public void test339() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test339");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var15 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test340() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test340");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        boolean var13 = var9.isEmpty();
        boolean var14 = var9.isEmpty();
        int var15 = var9.size();
        int var16 = var9.size();
        int var17 = var9.size();
        boolean var18 = var9.isEmpty();
        var9.removeAll();
        boolean var20 = var9.isEmpty();
        var9.removeAll();
        var0.add(1, (java.lang.Object) var9);
        int var23 = var9.size();
        var9.removeAll();
        boolean var25 = var9.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        boolean var29 = var27.isEmpty();
        boolean var30 = var27.isEmpty();
        boolean var31 = var27.isEmpty();
        boolean var32 = var27.isEmpty();
        var27.removeAll();
        var27.removeAll();
        var27.removeAll();
        int var36 = var27.size();
        boolean var37 = var27.isEmpty();
        int var38 = var27.size();
        boolean var39 = var27.isEmpty();
        boolean var40 = var27.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var9.add(10, (java.lang.Object) var27);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
    }
    
    public void test341() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test341");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        int var25 = var0.size();
        boolean var26 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var29 = var28.size();
        var28.add(0, (java.lang.Object) 100L);
        int var33 = var28.size();
        int var34 = var28.size();
        int var35 = var28.size();
        int var36 = var28.size();
        var28.remove(0);
        boolean var39 = var28.isEmpty();
        var28.removeAll();
        int var41 = var28.size();
        var0.add(0, (java.lang.Object) var41);
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        var44.removeAll();
        int var47 = var44.size();
        var44.removeAll();
        int var49 = var44.size();
        int var50 = var44.size();
        var44.removeAll();
        boolean var52 = var44.isEmpty();
        int var53 = var44.size();
        boolean var54 = var44.isEmpty();
        boolean var55 = var44.isEmpty();
        var0.add(3, (java.lang.Object) var44);
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
    }
    
    public void test342() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test342");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var29);
        var26.removeAll();
        var26.removeAll();
        int var35 = var26.size();
        boolean var36 = var26.isEmpty();
        var3.add(2, (java.lang.Object) var36);
        var3.remove(1);
        boolean var40 = var3.isEmpty();
        var3.remove(1);
        var3.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
    }
    
    public void test343() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test343");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        java.lang.Object var25 = var0.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        int var34 = var27.size();
        int var35 = var27.size();
        var27.removeAll();
        var0.add(2, (java.lang.Object) var27);
        var0.remove(2);
        int var40 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        var42.removeAll();
        int var45 = var42.size();
        boolean var46 = var42.isEmpty();
        int var47 = var42.size();
        int var48 = var42.size();
        int var49 = var42.size();
        int var50 = var42.size();
        int var51 = var42.size();
        var0.add(0, (java.lang.Object) var42);
        int var53 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var55 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + 100L + "'", var25.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 4);
        
    }
    
    public void test344() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test344");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var13.removeAll();
        boolean var15 = var13.isEmpty();
        int var16 = var13.size();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        boolean var20 = var13.isEmpty();
        boolean var21 = var13.isEmpty();
        int var22 = var13.size();
        var0.add(0, (java.lang.Object) var22);
        int var24 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 2);
        
    }
    
    public void test345() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test345");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        java.lang.Object var36 = var5.get(1);
        var5.removeAll();
        boolean var38 = var5.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var40 = var5.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var36 + "' != '" + 1L + "'", var36.equals(1L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
    }
    
    public void test346() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test346");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        var5.removeAll();
        boolean var9 = var5.isEmpty();
        var0.add(0, (java.lang.Object) var9);
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
    }
    
    public void test347() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test347");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
    }
    
    public void test348() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test348");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        java.lang.Object var13 = var0.get(0);
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        var0.removeAll();
        boolean var17 = var0.isEmpty();
        int var18 = var0.size();
        int var19 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var21 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + false + "'", var13.equals(false));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
    }
    
    public void test349() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test349");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.add(0, (java.lang.Object) 100L);
        int var17 = var12.size();
        int var18 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var12.removeAll();
        int var22 = var12.size();
        var0.add(0, (java.lang.Object) var12);
        var0.removeAll();
        int var25 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var27 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
    }
    
    public void test350() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test350");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var11 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
    }
    
    public void test351() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test351");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.remove(0);
        int var11 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var23 = var15.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
    }
    
    public void test352() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test352");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var16 = var0.size();
        int var17 = var0.size();
        int var18 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
    }
    
    public void test353() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test353");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var8.add(0, (java.lang.Object) var11);
        var11.add(0, (java.lang.Object) (-1.0d));
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        int var20 = var11.size();
        boolean var21 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var24 = var23.isEmpty();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        var23.removeAll();
        var0.add(0, (java.lang.Object) var23);
        int var29 = var23.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var23.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
    }
    
    public void test354() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test354");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        boolean var27 = var16.isEmpty();
        int var28 = var16.size();
        int var29 = var16.size();
        int var30 = var16.size();
        var16.removeAll();
        boolean var32 = var16.isEmpty();
        boolean var33 = var16.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(2, (java.lang.Object) var16);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
    }
    
    public void test355() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test355");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
    }
    
    public void test356() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test356");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        boolean var19 = var15.isEmpty();
        int var20 = var15.size();
        boolean var21 = var15.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var23 = var15.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
    }
    
    public void test357() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test357");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        int var20 = var3.size();
        int var21 = var3.size();
        java.lang.Object var23 = var3.get(0);
        var3.removeAll();
        boolean var25 = var3.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var27 = var3.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
    }
    
    public void test358() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test358");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        var8.removeAll();
        int var12 = var8.size();
        boolean var13 = var8.isEmpty();
        var8.removeAll();
        var0.add(0, (java.lang.Object) var8);
        var8.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var8.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test359() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test359");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        var3.removeAll();
        var3.removeAll();
        int var13 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        var15.add(0, (java.lang.Object) var18);
        var18.add(0, (java.lang.Object) (-1.0d));
        var18.removeAll();
        boolean var26 = var18.isEmpty();
        int var27 = var18.size();
        boolean var28 = var18.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var31 = var30.isEmpty();
        var30.removeAll();
        var18.add(0, (java.lang.Object) var30);
        int var34 = var30.size();
        var30.removeAll();
        var30.removeAll();
        var3.add(0, (java.lang.Object) var30);
        int var38 = var30.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var40 = var30.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
    }
    
    public void test360() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test360");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        var0.remove(0);
        int var11 = var0.size();
        int var12 = var0.size();
        int var13 = var0.size();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        boolean var16 = var0.isEmpty();
        boolean var17 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
    }
    
    public void test361() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test361");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        var3.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        boolean var20 = var14.isEmpty();
        boolean var21 = var14.isEmpty();
        var3.add(0, (java.lang.Object) var21);
        var3.removeAll();
        int var24 = var3.size();
        boolean var25 = var3.isEmpty();
        int var26 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
    }
    
    public void test362() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test362");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        var3.removeAll();
        var3.removeAll();
        int var15 = var3.size();
        boolean var16 = var3.isEmpty();
        var3.removeAll();
        int var18 = var3.size();
        var3.removeAll();
        var3.removeAll();
        int var21 = var3.size();
        int var22 = var3.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
    }
    
    public void test363() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test363");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        var3.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        int var21 = var14.size();
        int var22 = var14.size();
        var14.remove(0);
        int var25 = var14.size();
        int var26 = var14.size();
        var3.add(0, (java.lang.Object) var26);
        int var28 = var3.size();
        int var29 = var3.size();
        boolean var30 = var3.isEmpty();
        int var31 = var3.size();
        int var32 = var3.size();
        int var33 = var3.size();
        int var34 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var37 = var36.isEmpty();
        boolean var38 = var36.isEmpty();
        var36.removeAll();
        boolean var40 = var36.isEmpty();
        var36.removeAll();
        boolean var42 = var36.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        var44.removeAll();
        int var48 = var44.size();
        boolean var49 = var44.isEmpty();
        var44.removeAll();
        var36.add(0, (java.lang.Object) var44);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(10, (java.lang.Object) var36);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
    }
    
    public void test364() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test364");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        var8.removeAll();
        int var11 = var8.size();
        var8.removeAll();
        var8.add(0, (java.lang.Object) 100L);
        int var16 = var8.size();
        var8.removeAll();
        int var18 = var8.size();
        var0.add(0, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.removeAll();
        int var22 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var25 = var0.get(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
    }
    
    public void test365() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test365");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.add(0, (java.lang.Object) 100L);
        int var17 = var12.size();
        boolean var18 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var20.removeAll();
        boolean var22 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.removeAll();
        var24.removeAll();
        var20.add(0, (java.lang.Object) var24);
        boolean var29 = var20.isEmpty();
        boolean var30 = var20.isEmpty();
        var12.add(1, (java.lang.Object) var30);
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        int var36 = var33.size();
        boolean var37 = var33.isEmpty();
        int var38 = var33.size();
        int var39 = var33.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var42 = var41.isEmpty();
        var41.removeAll();
        int var44 = var41.size();
        var41.removeAll();
        var41.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var50 = var41.get(0);
        int var51 = var41.size();
        int var52 = var41.size();
        var41.remove(0);
        var33.add(0, (java.lang.Object) var41);
        var33.removeAll();
        var12.add(0, (java.lang.Object) var33);
        var0.add(0, (java.lang.Object) var33);
        int var59 = var0.size();
        var0.removeAll();
        boolean var61 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + (byte) 1 + "'",
                var50.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
    }
    
    public void test366() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test366");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        var3.add(0, (java.lang.Object) var19);
        var19.removeAll();
        int var26 = var19.size();
        boolean var27 = var19.isEmpty();
        boolean var28 = var19.isEmpty();
        int var29 = var19.size();
        int var30 = var19.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var32 = var19.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
    }
    
    public void test367() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test367");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var10 = var9.isEmpty();
        boolean var11 = var9.isEmpty();
        var9.removeAll();
        var9.add(0, (java.lang.Object) 1.0d);
        int var16 = var9.size();
        var9.removeAll();
        int var18 = var9.size();
        var0.add(0, (java.lang.Object) var18);
        boolean var20 = var0.isEmpty();
        boolean var21 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
    }
    
    public void test368() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test368");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        int var13 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test369() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test369");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var10.removeAll();
        int var16 = var10.size();
        var10.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var20 = var19.isEmpty();
        var19.removeAll();
        int var22 = var19.size();
        var19.removeAll();
        int var24 = var19.size();
        var10.add(0, (java.lang.Object) var19);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(1, (java.lang.Object) 0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
    }
    
    public void test370() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test370");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        int var29 = var26.size();
        var26.removeAll();
        var3.add(2, (java.lang.Object) var26);
        int var32 = var3.size();
        var3.remove(0);
        boolean var35 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        var37.add(0, (java.lang.Object) 100L);
        int var42 = var37.size();
        int var43 = var37.size();
        java.lang.Object var45 = var37.get(0);
        var37.remove(0);
        var37.removeAll();
        boolean var49 = var37.isEmpty();
        var3.add(1, (java.lang.Object) var49);
        boolean var51 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var54 = var53.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var56 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var57 = var56.size();
        boolean var58 = var56.isEmpty();
        var53.add(0, (java.lang.Object) var56);
        var56.add(0, (java.lang.Object) (-1.0d));
        var56.removeAll();
        boolean var64 = var56.isEmpty();
        int var65 = var56.size();
        boolean var66 = var56.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var68 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var68.removeAll();
        boolean var70 = var68.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var72 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var73 = var72.size();
        var72.removeAll();
        var72.removeAll();
        var68.add(0, (java.lang.Object) var72);
        var56.add(0, (java.lang.Object) var72);
        var72.removeAll();
        int var79 = var72.size();
        var3.add(1, (java.lang.Object) var79);
        var3.remove(2);
        int var83 = var3.size();
        var3.removeAll();
        var3.removeAll();
        int var86 = var3.size();
        boolean var87 = var3.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var45 + "' != '" + 100L + "'", var45.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var83 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var86 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == true);
        
    }
    
    public void test371() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test371");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        var29.add(0, (java.lang.Object) 100L);
        int var34 = var29.size();
        boolean var35 = var29.isEmpty();
        boolean var36 = var29.isEmpty();
        var26.add(0, (java.lang.Object) var36);
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        var39.add(0, (java.lang.Object) 100L);
        int var44 = var39.size();
        int var45 = var39.size();
        int var46 = var39.size();
        var39.removeAll();
        boolean var48 = var39.isEmpty();
        boolean var49 = var39.isEmpty();
        var26.add(1, (java.lang.Object) var49);
        int var51 = var26.size();
        int var52 = var26.size();
        var0.add(0, (java.lang.Object) var52);
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var56 = var55.size();
        var55.add(0, (java.lang.Object) 100L);
        int var60 = var55.size();
        int var61 = var55.size();
        int var62 = var55.size();
        java.lang.Object var64 = var55.get(0);
        int var65 = var55.size();
        var55.removeAll();
        boolean var67 = var55.isEmpty();
        boolean var68 = var55.isEmpty();
        var0.add(1, (java.lang.Object) var68);
        ar.verificacion.validacion.treelistimplementation.TreeList var71 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var72 = var71.isEmpty();
        var71.removeAll();
        int var74 = var71.size();
        var71.removeAll();
        var71.add(0, (java.lang.Object) (byte) 1);
        int var79 = var71.size();
        var71.removeAll();
        var0.add(0, (java.lang.Object) var71);
        var0.remove(2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var64 + "' != '" + 100L + "'", var64.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 1);
        
    }
    
    public void test372() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test372");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.remove(0);
        int var15 = var0.size();
        int var16 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
    }
    
    public void test373() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test373");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        var0.remove(0);
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var11.removeAll();
        int var15 = var11.size();
        int var16 = var11.size();
        var11.removeAll();
        int var18 = var11.size();
        var0.add(0, (java.lang.Object) var11);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
    }
    
    public void test374() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test374");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        boolean var9 = var7.isEmpty();
        boolean var10 = var7.isEmpty();
        var7.removeAll();
        var0.add(0, (java.lang.Object) var7);
        int var13 = var0.size();
        int var14 = var0.size();
        boolean var15 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.add(0, (java.lang.Object) 100L);
        int var25 = var20.size();
        boolean var26 = var20.isEmpty();
        boolean var27 = var20.isEmpty();
        var17.add(0, (java.lang.Object) var27);
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.add(0, (java.lang.Object) 100L);
        int var35 = var30.size();
        int var36 = var30.size();
        int var37 = var30.size();
        var30.removeAll();
        boolean var39 = var30.isEmpty();
        boolean var40 = var30.isEmpty();
        var17.add(1, (java.lang.Object) var40);
        var17.add(0, (java.lang.Object) 'a');
        int var45 = var17.size();
        var17.remove(2);
        boolean var48 = var17.isEmpty();
        var17.remove(0);
        boolean var51 = var17.isEmpty();
        var17.removeAll();
        int var53 = var17.size();
        boolean var54 = var17.isEmpty();
        var0.add(0, (java.lang.Object) var54);
        int var56 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 3);
        
    }
    
    public void test375() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test375");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        java.lang.Object var8 = var0.get(0);
        var0.remove(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.add(0, (java.lang.Object) 100L);
        int var17 = var12.size();
        int var18 = var12.size();
        var12.removeAll();
        int var20 = var12.size();
        var12.removeAll();
        int var22 = var12.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.removeAll();
        int var27 = var24.size();
        var24.removeAll();
        var24.add(0, (java.lang.Object) 100L);
        int var32 = var24.size();
        var24.removeAll();
        var12.add(0, (java.lang.Object) var24);
        boolean var35 = var24.isEmpty();
        var24.removeAll();
        boolean var37 = var24.isEmpty();
        boolean var38 = var24.isEmpty();
        var24.removeAll();
        var0.add(0, (java.lang.Object) var24);
        var24.removeAll();
        var24.removeAll();
        var24.removeAll();
        boolean var44 = var24.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var24.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var8 + "' != '" + 100L + "'", var8.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
    }
    
    public void test376() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test376");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var13 = var0.size();
        int var14 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var17 = var0.size();
        int var18 = var0.size();
        boolean var19 = var0.isEmpty();
        int var20 = var0.size();
        int var21 = var0.size();
        var0.removeAll();
        boolean var23 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
    }
    
    public void test377() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test377");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var21.add(0, (java.lang.Object) var24);
        var24.add(0, (java.lang.Object) (-1.0d));
        var24.removeAll();
        boolean var32 = var24.isEmpty();
        var24.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        var35.add(0, (java.lang.Object) 100L);
        int var40 = var35.size();
        int var41 = var35.size();
        int var42 = var35.size();
        int var43 = var35.size();
        var35.remove(0);
        int var46 = var35.size();
        int var47 = var35.size();
        var24.add(0, (java.lang.Object) var47);
        var3.add(0, (java.lang.Object) var47);
        boolean var50 = var3.isEmpty();
        var3.removeAll();
        int var52 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
    }
    
    public void test378() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test378");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var10 = var9.isEmpty();
        var9.removeAll();
        int var12 = var9.size();
        var9.removeAll();
        int var14 = var9.size();
        var0.add(0, (java.lang.Object) var9);
        var0.removeAll();
        boolean var17 = var0.isEmpty();
        boolean var18 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        boolean var28 = var26.isEmpty();
        boolean var29 = var26.isEmpty();
        boolean var30 = var26.isEmpty();
        var22.add(0, (java.lang.Object) var30);
        boolean var32 = var22.isEmpty();
        var22.removeAll();
        boolean var34 = var22.isEmpty();
        int var35 = var22.size();
        var22.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var38.removeAll();
        boolean var40 = var38.isEmpty();
        int var41 = var38.size();
        boolean var42 = var38.isEmpty();
        boolean var43 = var38.isEmpty();
        int var44 = var38.size();
        int var45 = var38.size();
        int var46 = var38.size();
        boolean var47 = var38.isEmpty();
        int var48 = var38.size();
        var22.add(0, (java.lang.Object) var38);
        boolean var50 = var38.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var50);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
    }
    
    public void test379() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test379");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        boolean var15 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var17.removeAll();
        boolean var19 = var17.isEmpty();
        int var20 = var17.size();
        var17.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var29 = var28.size();
        boolean var30 = var28.isEmpty();
        var25.add(0, (java.lang.Object) var28);
        var28.add(0, (java.lang.Object) (-1.0d));
        var28.removeAll();
        boolean var36 = var28.isEmpty();
        int var37 = var28.size();
        boolean var38 = var28.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var41 = var40.isEmpty();
        var40.removeAll();
        var28.add(0, (java.lang.Object) var40);
        var40.removeAll();
        var17.add(0, (java.lang.Object) var40);
        var12.add(0, (java.lang.Object) var17);
        java.lang.Object var48 = var17.get(0);
        boolean var49 = var17.isEmpty();
        var0.add(0, (java.lang.Object) var49);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == false);
        
    }
    
    public void test380() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test380");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test381() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test381");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        boolean var27 = var25.isEmpty();
        var22.add(0, (java.lang.Object) var25);
        var25.add(0, (java.lang.Object) (-1.0d));
        var25.removeAll();
        boolean var33 = var25.isEmpty();
        int var34 = var25.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var40 = var39.size();
        boolean var41 = var39.isEmpty();
        var36.add(0, (java.lang.Object) var39);
        int var43 = var39.size();
        boolean var44 = var39.isEmpty();
        var39.removeAll();
        var39.removeAll();
        var25.add(0, (java.lang.Object) var39);
        var3.add(0, (java.lang.Object) var25);
        boolean var49 = var25.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var25.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == false);
        
    }
    
    public void test382() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test382");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var14);
        int var28 = var0.size();
        var0.remove(1);
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 2);
        
    }
    
    public void test383() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test383");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        var0.remove(1);
        var0.removeAll();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
    }
    
    public void test384() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test384");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        boolean var34 = var0.isEmpty();
        var0.remove(2);
        var0.remove(2);
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
    }
    
    public void test385() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test385");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.remove(0);
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        int var15 = var12.size();
        int var16 = var12.size();
        var12.removeAll();
        var12.removeAll();
        boolean var19 = var12.isEmpty();
        boolean var20 = var12.isEmpty();
        int var21 = var12.size();
        int var22 = var12.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.add(0, (java.lang.Object) 100L);
        int var29 = var24.size();
        boolean var30 = var24.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var32.removeAll();
        boolean var34 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        var36.removeAll();
        var36.removeAll();
        var32.add(0, (java.lang.Object) var36);
        boolean var41 = var32.isEmpty();
        boolean var42 = var32.isEmpty();
        var24.add(1, (java.lang.Object) var42);
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var46 = var45.size();
        var45.removeAll();
        int var48 = var45.size();
        boolean var49 = var45.isEmpty();
        int var50 = var45.size();
        int var51 = var45.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var54 = var53.isEmpty();
        var53.removeAll();
        int var56 = var53.size();
        var53.removeAll();
        var53.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var62 = var53.get(0);
        int var63 = var53.size();
        int var64 = var53.size();
        var53.remove(0);
        var45.add(0, (java.lang.Object) var53);
        var45.removeAll();
        var24.add(0, (java.lang.Object) var45);
        var12.add(0, (java.lang.Object) var45);
        var12.remove(0);
        var0.add(0, (java.lang.Object) 0);
        int var74 = var0.size();
        int var75 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var62 + "' != '" + (byte) 1 + "'",
                var62.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 1);
        
    }
    
    public void test386() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test386");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        int var13 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        var15.add(0, (java.lang.Object) 100L);
        int var20 = var15.size();
        int var21 = var15.size();
        int var22 = var15.size();
        java.lang.Object var24 = var15.get(0);
        int var25 = var15.size();
        int var26 = var15.size();
        int var27 = var15.size();
        java.lang.Object var29 = var15.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        var31.removeAll();
        int var34 = var31.size();
        int var35 = var31.size();
        boolean var36 = var31.isEmpty();
        var31.removeAll();
        var15.add(0, (java.lang.Object) var31);
        var0.add(0, (java.lang.Object) var15);
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        boolean var44 = var41.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        var46.removeAll();
        boolean var50 = var46.isEmpty();
        var41.add(0, (java.lang.Object) var50);
        var41.removeAll();
        boolean var53 = var41.isEmpty();
        var41.removeAll();
        int var55 = var41.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) var55);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + 100L + "'", var24.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var29 + "' != '" + 100L + "'", var29.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
    }
    
    public void test387() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test387");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        var19.removeAll();
        int var23 = var19.size();
        boolean var24 = var19.isEmpty();
        boolean var25 = var19.isEmpty();
        boolean var26 = var19.isEmpty();
        var6.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        var29.add(0, (java.lang.Object) var33);
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        boolean var40 = var29.isEmpty();
        var29.removeAll();
        var6.add(0, (java.lang.Object) var29);
        java.lang.Object var44 = var6.get(0);
        boolean var45 = var6.isEmpty();
        var6.remove(1);
        var6.removeAll();
        boolean var49 = var6.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
    }
    
    public void test388() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test388");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 100L);
        int var8 = var0.size();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        boolean var25 = var14.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var14);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
    }
    
    public void test389() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test389");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
    }
    
    public void test390() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test390");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        int var31 = var16.size();
        int var32 = var16.size();
        int var33 = var16.size();
        boolean var34 = var16.isEmpty();
        var16.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
    }
    
    public void test391() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test391");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        var3.removeAll();
        var3.removeAll();
        int var15 = var3.size();
        boolean var16 = var3.isEmpty();
        boolean var17 = var3.isEmpty();
        int var18 = var3.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var20 = var3.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
    }
    
    public void test392() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test392");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var20 = var3.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
    }
    
    public void test393() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test393");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        boolean var15 = var0.isEmpty();
        int var16 = var0.size();
        boolean var17 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
    }
    
    public void test394() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test394");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        var13.removeAll();
        boolean var21 = var13.isEmpty();
        var13.removeAll();
        var0.add(0, (java.lang.Object) var13);
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        var0.add(0, (java.lang.Object) var25);
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
    }
    
    public void test395() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test395");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        var0.removeAll();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var15 = var0.isEmpty();
        boolean var16 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.removeAll();
        int var23 = var20.size();
        var20.removeAll();
        boolean var25 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        var30.add(0, (java.lang.Object) (-1.0d));
        var30.removeAll();
        boolean var38 = var30.isEmpty();
        int var39 = var30.size();
        var30.removeAll();
        var30.removeAll();
        var30.removeAll();
        var20.add(0, (java.lang.Object) var30);
        boolean var44 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        int var49 = var46.size();
        var46.removeAll();
        boolean var51 = var46.isEmpty();
        boolean var52 = var46.isEmpty();
        boolean var53 = var46.isEmpty();
        var46.removeAll();
        var20.add(0, (java.lang.Object) var46);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(100, (java.lang.Object) var46);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
    }
    
    public void test396() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test396");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        int var5 = var0.size();
        var0.removeAll();
        int var7 = var0.size();
        int var8 = var0.size();
        int var9 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        boolean var22 = var11.isEmpty();
        boolean var23 = var11.isEmpty();
        int var24 = var11.size();
        var11.remove(0);
        int var27 = var11.size();
        boolean var28 = var11.isEmpty();
        int var29 = var11.size();
        boolean var30 = var11.isEmpty();
        var11.removeAll();
        var11.removeAll();
        int var33 = var11.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(2, (java.lang.Object) var33);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
    }
    
    public void test397() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test397");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 100L);
        int var8 = var0.size();
        var0.removeAll();
        int var10 = var0.size();
        int var11 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
    }
    
    public void test398() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test398");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var7 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var8 = var7.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        var7.add(0, (java.lang.Object) var10);
        var10.add(0, (java.lang.Object) (-1.0d));
        var10.removeAll();
        boolean var18 = var10.isEmpty();
        int var19 = var10.size();
        var10.removeAll();
        var10.removeAll();
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        boolean var24 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        int var29 = var26.size();
        var26.removeAll();
        boolean var31 = var26.isEmpty();
        boolean var32 = var26.isEmpty();
        boolean var33 = var26.isEmpty();
        var26.removeAll();
        var0.add(0, (java.lang.Object) var26);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var37 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
    }
    
    public void test399() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test399");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var8.add(0, (java.lang.Object) var11);
        var11.add(0, (java.lang.Object) (-1.0d));
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        int var20 = var11.size();
        boolean var21 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var24 = var23.isEmpty();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        var23.removeAll();
        var0.add(0, (java.lang.Object) var23);
        var0.remove(1);
        boolean var31 = var0.isEmpty();
        int var32 = var0.size();
        var0.removeAll();
        int var34 = var0.size();
        boolean var35 = var0.isEmpty();
        boolean var36 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
    }
    
    public void test400() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test400");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var15 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var18 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
    }
    
    public void test401() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test401");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var22 = var21.size();
        boolean var23 = var21.isEmpty();
        boolean var24 = var21.isEmpty();
        boolean var25 = var21.isEmpty();
        var17.add(0, (java.lang.Object) var25);
        boolean var27 = var17.isEmpty();
        var17.removeAll();
        boolean var29 = var17.isEmpty();
        boolean var30 = var17.isEmpty();
        var17.removeAll();
        int var32 = var17.size();
        var17.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        var35.removeAll();
        int var38 = var35.size();
        boolean var39 = var35.isEmpty();
        var35.removeAll();
        var35.removeAll();
        int var42 = var35.size();
        int var43 = var35.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var45 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var46 = var45.isEmpty();
        var45.removeAll();
        int var48 = var45.size();
        var45.removeAll();
        var45.add(0, (java.lang.Object) (byte) 1);
        boolean var53 = var45.isEmpty();
        boolean var54 = var45.isEmpty();
        var35.add(0, (java.lang.Object) var54);
        var17.add(0, (java.lang.Object) 0);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(1, (java.lang.Object) var17);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);
        
    }
    
    public void test402() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test402");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        boolean var16 = var0.isEmpty();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
    }
    
    public void test403() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test403");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        var8.add(0, (java.lang.Object) var11);
        var11.add(0, (java.lang.Object) (-1.0d));
        var11.removeAll();
        boolean var19 = var11.isEmpty();
        int var20 = var11.size();
        boolean var21 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var24 = var23.isEmpty();
        var23.removeAll();
        var11.add(0, (java.lang.Object) var23);
        var23.removeAll();
        var0.add(0, (java.lang.Object) var23);
        var0.removeAll();
        boolean var30 = var0.isEmpty();
        int var31 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var33 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
    }
    
    public void test404() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test404");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        java.lang.Object var19 = var6.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var22 = var21.isEmpty();
        boolean var23 = var21.isEmpty();
        var21.removeAll();
        var21.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        var30.add(0, (java.lang.Object) (-1.0d));
        boolean var37 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var39 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var39.removeAll();
        boolean var41 = var39.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var44 = var43.size();
        var43.removeAll();
        var43.removeAll();
        var39.add(0, (java.lang.Object) var43);
        var43.removeAll();
        var30.add(0, (java.lang.Object) var43);
        ar.verificacion.validacion.treelistimplementation.TreeList var51 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var52 = var51.size();
        boolean var53 = var51.isEmpty();
        var51.removeAll();
        int var55 = var51.size();
        boolean var56 = var51.isEmpty();
        var43.add(0, (java.lang.Object) var51);
        int var58 = var43.size();
        var21.add(0, (java.lang.Object) var43);
        boolean var60 = var43.isEmpty();
        int var61 = var43.size();
        var6.add(0, (java.lang.Object) var43);
        int var63 = var6.size();
        boolean var64 = var6.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var6.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + true + "'", var19.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == false);
        
    }
    
    public void test405() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test405");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        boolean var20 = var0.isEmpty();
        boolean var21 = var0.isEmpty();
        int var22 = var0.size();
        int var23 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 2);
        
    }
    
    public void test406() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test406");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        int var9 = var0.size();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var13.removeAll();
        int var17 = var13.size();
        var13.removeAll();
        boolean var19 = var13.isEmpty();
        var13.removeAll();
        boolean var21 = var13.isEmpty();
        int var22 = var13.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var13);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
    }
    
    public void test407() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test407");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var16.isEmpty();
        boolean var29 = var16.isEmpty();
        int var30 = var16.size();
        boolean var31 = var16.isEmpty();
        int var32 = var16.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var34.removeAll();
        boolean var36 = var34.isEmpty();
        int var37 = var34.size();
        var34.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        var34.add(0, (java.lang.Object) var40);
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        var52.add(0, (java.lang.Object) 100L);
        int var57 = var52.size();
        boolean var58 = var52.isEmpty();
        boolean var59 = var52.isEmpty();
        var52.remove(0);
        var52.removeAll();
        var40.add(1, (java.lang.Object) var52);
        int var64 = var52.size();
        int var65 = var52.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var67 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var67.removeAll();
        boolean var69 = var67.isEmpty();
        int var70 = var67.size();
        var67.removeAll();
        boolean var72 = var67.isEmpty();
        var67.removeAll();
        boolean var74 = var67.isEmpty();
        boolean var75 = var67.isEmpty();
        var52.add(0, (java.lang.Object) var67);
        var16.add(0, (java.lang.Object) 0);
        ar.verificacion.validacion.treelistimplementation.TreeList var79 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var80 = var79.size();
        var79.add(0, (java.lang.Object) 100L);
        boolean var84 = var79.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var86 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var87 = var86.size();
        boolean var88 = var86.isEmpty();
        boolean var89 = var86.isEmpty();
        var86.removeAll();
        var79.add(0, (java.lang.Object) var86);
        int var92 = var79.size();
        int var93 = var79.size();
        int var94 = var79.size();
        boolean var95 = var79.isEmpty();
        var16.add(1, (java.lang.Object) var79);
        var79.removeAll();
        var79.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var80 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var88 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var92 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var93 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var94 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var95 == false);
        
    }
    
    public void test408() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test408");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        var9.removeAll();
        int var14 = var9.size();
        boolean var15 = var9.isEmpty();
        var9.removeAll();
        var0.add(0, (java.lang.Object) var9);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        int var21 = var0.size();
        int var22 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var25 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
    }
    
    public void test409() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test409");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        int var11 = var0.size();
        var0.remove(0);
        boolean var14 = var0.isEmpty();
        boolean var15 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);
        
    }
    
    public void test410() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test410");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        boolean var31 = var0.isEmpty();
        var0.remove(0);
        boolean var34 = var0.isEmpty();
        var0.removeAll();
        boolean var36 = var0.isEmpty();
        var0.removeAll();
        int var38 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var40.removeAll();
        boolean var42 = var40.isEmpty();
        int var43 = var40.size();
        boolean var44 = var40.isEmpty();
        boolean var45 = var40.isEmpty();
        int var46 = var40.size();
        int var47 = var40.size();
        int var48 = var40.size();
        var40.removeAll();
        boolean var50 = var40.isEmpty();
        boolean var51 = var40.isEmpty();
        boolean var52 = var40.isEmpty();
        var40.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var40);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
    }
    
    public void test411() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test411");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        var0.removeAll();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        int var13 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test412() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test412");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        boolean var38 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        boolean var50 = var40.isEmpty();
        var40.removeAll();
        boolean var52 = var40.isEmpty();
        var32.add(1, (java.lang.Object) var40);
        var32.removeAll();
        var0.add(2, (java.lang.Object) var32);
        boolean var56 = var0.isEmpty();
        boolean var57 = var0.isEmpty();
        boolean var58 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
    }
    
    public void test413() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test413");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        int var8 = var0.size();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test414() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test414");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        java.lang.Object var36 = var5.get(1);
        var5.removeAll();
        boolean var38 = var5.isEmpty();
        int var39 = var5.size();
        var5.removeAll();
        boolean var41 = var5.isEmpty();
        var5.removeAll();
        var5.removeAll();
        boolean var44 = var5.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var36 + "' != '" + 1L + "'", var36.equals(1L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
    }
    
    public void test415() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test415");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        var24.removeAll();
        int var32 = var24.size();
        boolean var33 = var24.isEmpty();
        var24.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var24.remove(1);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
    }
    
    public void test416() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test416");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        var5.removeAll();
        boolean var9 = var5.isEmpty();
        var0.add(0, (java.lang.Object) var9);
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var13.removeAll();
        boolean var15 = var13.isEmpty();
        int var16 = var13.size();
        var13.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        boolean var26 = var23.isEmpty();
        boolean var27 = var23.isEmpty();
        var19.add(0, (java.lang.Object) var27);
        var13.add(0, (java.lang.Object) var19);
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        var31.add(0, (java.lang.Object) 100L);
        int var36 = var31.size();
        boolean var37 = var31.isEmpty();
        boolean var38 = var31.isEmpty();
        var31.remove(0);
        var31.removeAll();
        var19.add(1, (java.lang.Object) var31);
        int var43 = var31.size();
        int var44 = var31.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var47 = var46.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var49 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var50 = var49.size();
        boolean var51 = var49.isEmpty();
        var46.add(0, (java.lang.Object) var49);
        var46.remove(0);
        var46.removeAll();
        int var56 = var46.size();
        int var57 = var46.size();
        var31.add(0, (java.lang.Object) var46);
        var31.removeAll();
        var0.add(1, (java.lang.Object) var31);
        var31.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var63 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var63.removeAll();
        boolean var65 = var63.isEmpty();
        int var66 = var63.size();
        boolean var67 = var63.isEmpty();
        boolean var68 = var63.isEmpty();
        int var69 = var63.size();
        int var70 = var63.size();
        int var71 = var63.size();
        boolean var72 = var63.isEmpty();
        int var73 = var63.size();
        int var74 = var63.size();
        int var75 = var63.size();
        var31.add(0, (java.lang.Object) var75);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 0);
        
    }
    
    public void test417() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test417");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        var0.add(0, (java.lang.Object) (short) 10);
        var0.removeAll();
        int var16 = var0.size();
        int var17 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + (byte) 1 + "'",
                var9.equals((byte) 1));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test418() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test418");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var25.removeAll();
        boolean var27 = var25.isEmpty();
        int var28 = var25.size();
        var25.removeAll();
        int var30 = var25.size();
        boolean var31 = var25.isEmpty();
        boolean var32 = var25.isEmpty();
        var0.add(3, (java.lang.Object) var32);
        int var34 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        var36.removeAll();
        var36.removeAll();
        var36.removeAll();
        var36.add(0, (java.lang.Object) 0L);
        int var45 = var36.size();
        var36.removeAll();
        boolean var47 = var36.isEmpty();
        int var48 = var36.size();
        boolean var49 = var36.isEmpty();
        var36.removeAll();
        boolean var51 = var36.isEmpty();
        boolean var52 = var36.isEmpty();
        var0.add(1, (java.lang.Object) var36);
        ar.verificacion.validacion.treelistimplementation.TreeList var55 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var56 = var55.isEmpty();
        var55.removeAll();
        boolean var58 = var55.isEmpty();
        int var59 = var55.size();
        var55.removeAll();
        boolean var61 = var55.isEmpty();
        int var62 = var55.size();
        boolean var63 = var55.isEmpty();
        var0.add(3, (java.lang.Object) var55);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var66 = var55.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 4);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
    }
    
    public void test419() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test419");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        var0.removeAll();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        var17.add(0, (java.lang.Object) 100L);
        int var22 = var17.size();
        boolean var23 = var17.isEmpty();
        boolean var24 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var24);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        var27.add(0, (java.lang.Object) 100L);
        int var32 = var27.size();
        int var33 = var27.size();
        int var34 = var27.size();
        var27.removeAll();
        boolean var36 = var27.isEmpty();
        boolean var37 = var27.isEmpty();
        var14.add(1, (java.lang.Object) var37);
        var14.add(0, (java.lang.Object) 'a');
        var14.removeAll();
        int var43 = var14.size();
        boolean var44 = var14.isEmpty();
        boolean var45 = var14.isEmpty();
        int var46 = var14.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var14);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
    }
    
    public void test420() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test420");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        java.lang.Object var29 = var3.get(1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);
        
    }
    
    public void test421() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test421");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        int var10 = var0.size();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        int var14 = var0.size();
        int var15 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
    }
    
    public void test422() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test422");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var9 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var11 = var0.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
    }
    
    public void test423() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test423");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        var8.removeAll();
        int var11 = var8.size();
        var8.removeAll();
        var8.add(0, (java.lang.Object) 100L);
        int var16 = var8.size();
        var8.removeAll();
        int var18 = var8.size();
        var0.add(0, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.removeAll();
        boolean var22 = var0.isEmpty();
        var0.removeAll();
        int var24 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var27 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
    }
    
    public void test424() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test424");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        java.lang.Object var36 = var5.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        boolean var44 = var42.isEmpty();
        boolean var45 = var42.isEmpty();
        boolean var46 = var42.isEmpty();
        var38.add(0, (java.lang.Object) var46);
        int var48 = var38.size();
        int var49 = var38.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var51 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var52 = var51.size();
        boolean var53 = var51.isEmpty();
        boolean var54 = var51.isEmpty();
        boolean var55 = var51.isEmpty();
        boolean var56 = var51.isEmpty();
        var51.removeAll();
        var51.removeAll();
        var51.removeAll();
        int var60 = var51.size();
        int var61 = var51.size();
        int var62 = var51.size();
        boolean var63 = var51.isEmpty();
        var38.add(1, (java.lang.Object) var51);
        var51.removeAll();
        int var66 = var51.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var68 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var68.removeAll();
        boolean var70 = var68.isEmpty();
        int var71 = var68.size();
        var68.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var74 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var75 = var74.size();
        boolean var76 = var74.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var78 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var79 = var78.size();
        boolean var80 = var78.isEmpty();
        boolean var81 = var78.isEmpty();
        boolean var82 = var78.isEmpty();
        var74.add(0, (java.lang.Object) var82);
        var68.add(0, (java.lang.Object) var74);
        var68.removeAll();
        var51.add(0, (java.lang.Object) var68);
        int var87 = var68.size();
        int var88 = var68.size();
        int var89 = var68.size();
        var68.removeAll();
        var5.add(2, (java.lang.Object) var68);
        var5.removeAll();
        boolean var93 = var5.isEmpty();
        int var94 = var5.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var66 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var80 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var81 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var88 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var93 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var94 == 0);
        
    }
    
    public void test425() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test425");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        boolean var14 = var0.isEmpty();
        int var15 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var18.removeAll();
        boolean var20 = var18.isEmpty();
        int var21 = var18.size();
        boolean var22 = var18.isEmpty();
        boolean var23 = var18.isEmpty();
        var18.removeAll();
        var0.add(0, (java.lang.Object) var18);
        int var26 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 1);
        
    }
    
    public void test426() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test426");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        int var14 = var0.size();
        boolean var15 = var0.isEmpty();
        boolean var16 = var0.isEmpty();
        int var17 = var0.size();
        int var18 = var0.size();
        int var19 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
    }
    
    public void test427() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test427");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var23 = var22.size();
        var22.removeAll();
        var22.removeAll();
        boolean var26 = var22.isEmpty();
        var3.add(1, (java.lang.Object) var22);
        boolean var28 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.add(0, (java.lang.Object) 100L);
        int var35 = var30.size();
        boolean var36 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var39 = var38.size();
        boolean var40 = var38.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        boolean var44 = var42.isEmpty();
        boolean var45 = var42.isEmpty();
        boolean var46 = var42.isEmpty();
        var38.add(0, (java.lang.Object) var46);
        boolean var48 = var38.isEmpty();
        java.lang.Object var50 = var38.get(0);
        var38.remove(0);
        boolean var53 = var38.isEmpty();
        var30.add(0, (java.lang.Object) var53);
        var3.add(1, (java.lang.Object) var30);
        ar.verificacion.validacion.treelistimplementation.TreeList var57 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var58 = var57.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var60 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var61 = var60.size();
        boolean var62 = var60.isEmpty();
        var57.add(0, (java.lang.Object) var60);
        int var64 = var57.size();
        var57.removeAll();
        var57.removeAll();
        var57.removeAll();
        int var68 = var57.size();
        var57.removeAll();
        var30.add(1, (java.lang.Object) var57);
        boolean var71 = var57.isEmpty();
        boolean var72 = var57.isEmpty();
        var57.removeAll();
        boolean var74 = var57.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var76 = var57.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + true + "'", var50.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == true);
        
    }
    
    public void test428() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test428");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        boolean var31 = var16.isEmpty();
        int var32 = var16.size();
        boolean var33 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var35.removeAll();
        boolean var37 = var35.isEmpty();
        int var38 = var35.size();
        var35.removeAll();
        boolean var40 = var35.isEmpty();
        boolean var41 = var35.isEmpty();
        int var42 = var35.size();
        var35.removeAll();
        var35.removeAll();
        boolean var45 = var35.isEmpty();
        boolean var46 = var35.isEmpty();
        var16.add(1, (java.lang.Object) var35);
        boolean var48 = var35.isEmpty();
        int var49 = var35.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
    }
    
    public void test429() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test429");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var5 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var5.removeAll();
        boolean var7 = var5.isEmpty();
        int var8 = var5.size();
        var5.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        int var25 = var16.size();
        boolean var26 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var29 = var28.isEmpty();
        var28.removeAll();
        var16.add(0, (java.lang.Object) var28);
        var28.removeAll();
        var5.add(0, (java.lang.Object) var28);
        var0.add(0, (java.lang.Object) var5);
        java.lang.Object var36 = var5.get(0);
        int var37 = var5.size();
        var5.removeAll();
        boolean var39 = var5.isEmpty();
        int var40 = var5.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var5.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
    }
    
    public void test430() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test430");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        boolean var26 = var24.isEmpty();
        var24.removeAll();
        int var28 = var24.size();
        boolean var29 = var24.isEmpty();
        var16.add(0, (java.lang.Object) var24);
        var24.removeAll();
        boolean var32 = var24.isEmpty();
        var24.removeAll();
        int var34 = var24.size();
        boolean var35 = var24.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        var37.add(0, (java.lang.Object) var40);
        var40.add(0, (java.lang.Object) (-1.0d));
        var40.removeAll();
        boolean var48 = var40.isEmpty();
        int var49 = var40.size();
        var40.removeAll();
        var40.removeAll();
        int var52 = var40.size();
        boolean var53 = var40.isEmpty();
        int var54 = var40.size();
        int var55 = var40.size();
        var24.add(0, (java.lang.Object) var55);
        ar.verificacion.validacion.treelistimplementation.TreeList var58 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var59 = var58.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var61 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var62 = var61.size();
        boolean var63 = var61.isEmpty();
        var58.add(0, (java.lang.Object) var61);
        var61.add(0, (java.lang.Object) (-1.0d));
        boolean var68 = var61.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var70 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var70.removeAll();
        boolean var72 = var70.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var74 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var75 = var74.size();
        var74.removeAll();
        var74.removeAll();
        var70.add(0, (java.lang.Object) var74);
        var74.removeAll();
        var61.add(0, (java.lang.Object) var74);
        ar.verificacion.validacion.treelistimplementation.TreeList var82 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var83 = var82.size();
        boolean var84 = var82.isEmpty();
        var82.removeAll();
        int var86 = var82.size();
        boolean var87 = var82.isEmpty();
        var74.add(0, (java.lang.Object) var82);
        boolean var89 = var82.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var24.add(4, (java.lang.Object) var89);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var83 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var86 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == true);
        
    }
    
    public void test431() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test431");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        var0.removeAll();
        int var8 = var0.size();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        int var14 = var0.size();
        boolean var15 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
    }
    
    public void test432() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test432");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        int var8 = var0.size();
        int var9 = var0.size();
        int var10 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var12 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
    }
    
    public void test433() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test433");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        var13.removeAll();
        boolean var21 = var13.isEmpty();
        var13.removeAll();
        var0.add(0, (java.lang.Object) var13);
        var13.removeAll();
        var13.removeAll();
        int var26 = var13.size();
        boolean var27 = var13.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
    }
    
    public void test434() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test434");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
    }
    
    public void test435() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test435");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
    }
    
    public void test436() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test436");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var17.removeAll();
        boolean var19 = var17.isEmpty();
        int var20 = var17.size();
        var17.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        boolean var29 = var27.isEmpty();
        boolean var30 = var27.isEmpty();
        boolean var31 = var27.isEmpty();
        var23.add(0, (java.lang.Object) var31);
        var17.add(0, (java.lang.Object) var23);
        int var34 = var23.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        var36.removeAll();
        int var40 = var36.size();
        boolean var41 = var36.isEmpty();
        boolean var42 = var36.isEmpty();
        boolean var43 = var36.isEmpty();
        var23.add(0, (java.lang.Object) var43);
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var46.removeAll();
        boolean var48 = var46.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        var50.removeAll();
        var50.removeAll();
        var46.add(0, (java.lang.Object) var50);
        boolean var55 = var46.isEmpty();
        boolean var56 = var46.isEmpty();
        boolean var57 = var46.isEmpty();
        var46.removeAll();
        var23.add(0, (java.lang.Object) var46);
        int var60 = var46.size();
        var46.removeAll();
        var0.add(0, (java.lang.Object) var46);
        boolean var63 = var0.isEmpty();
        int var64 = var0.size();
        boolean var65 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == false);
        
    }
    
    public void test437() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test437");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var19.removeAll();
        boolean var21 = var19.isEmpty();
        int var22 = var19.size();
        var19.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        var30.add(0, (java.lang.Object) (-1.0d));
        var30.removeAll();
        boolean var38 = var30.isEmpty();
        int var39 = var30.size();
        boolean var40 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var43 = var42.isEmpty();
        var42.removeAll();
        var30.add(0, (java.lang.Object) var42);
        var42.removeAll();
        var19.add(0, (java.lang.Object) var42);
        var14.add(0, (java.lang.Object) var19);
        java.lang.Object var50 = var19.get(1);
        var19.add(1, (java.lang.Object) 100.0f);
        java.lang.Object var55 = var19.get(1);
        var0.add(0, (java.lang.Object) var19);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var59 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var60 = var59.size();
        boolean var61 = var59.isEmpty();
        boolean var62 = var59.isEmpty();
        boolean var63 = var59.isEmpty();
        var59.removeAll();
        int var65 = var59.size();
        var59.removeAll();
        boolean var67 = var59.isEmpty();
        boolean var68 = var59.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var70 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var71 = var70.size();
        boolean var72 = var70.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var74 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var75 = var74.size();
        boolean var76 = var74.isEmpty();
        boolean var77 = var74.isEmpty();
        boolean var78 = var74.isEmpty();
        var70.add(0, (java.lang.Object) var78);
        boolean var80 = var70.isEmpty();
        var70.removeAll();
        var70.removeAll();
        var59.add(0, (java.lang.Object) var70);
        int var84 = var70.size();
        int var85 = var70.size();
        var70.removeAll();
        int var87 = var70.size();
        var70.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) var70);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + 100L + "'", var9.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + 1L + "'", var50.equals(1L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var55 + "' != '" + 100.0f + "'", var55.equals(100.0f));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var78 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var80 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == 0);
        
    }
    
    public void test438() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test438");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var10 = var9.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        var9.add(0, (java.lang.Object) var12);
        var12.add(0, (java.lang.Object) (-1.0d));
        boolean var19 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var21 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var21.removeAll();
        boolean var23 = var21.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        var25.removeAll();
        var25.removeAll();
        var21.add(0, (java.lang.Object) var25);
        var25.removeAll();
        var12.add(0, (java.lang.Object) var25);
        var0.add(0, (java.lang.Object) 0);
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var35 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var36 = var35.size();
        boolean var37 = var35.isEmpty();
        boolean var38 = var35.isEmpty();
        boolean var39 = var35.isEmpty();
        boolean var40 = var35.isEmpty();
        var35.removeAll();
        var35.removeAll();
        boolean var43 = var35.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(10, (java.lang.Object) var35);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
    }
    
    public void test439() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test439");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        boolean var15 = var0.isEmpty();
        int var16 = var0.size();
        int var17 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test440() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test440");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        var10.remove(0);
        var10.removeAll();
        var0.add(0, (java.lang.Object) var10);
        boolean var20 = var10.isEmpty();
        int var21 = var10.size();
        var10.removeAll();
        boolean var23 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        var25.removeAll();
        int var28 = var25.size();
        var25.removeAll();
        var25.removeAll();
        boolean var31 = var25.isEmpty();
        var10.add(0, (java.lang.Object) var31);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var10.remove((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
    }
    
    public void test441() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test441");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        int var13 = var0.size();
        int var14 = var0.size();
        var0.remove(0);
        int var17 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
    }
    
    public void test442() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test442");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var16.removeAll();
        boolean var18 = var16.isEmpty();
        int var19 = var16.size();
        boolean var20 = var16.isEmpty();
        boolean var21 = var16.isEmpty();
        int var22 = var16.size();
        int var23 = var16.size();
        int var24 = var16.size();
        boolean var25 = var16.isEmpty();
        int var26 = var16.size();
        var0.add(0, (java.lang.Object) var16);
        boolean var28 = var16.isEmpty();
        boolean var29 = var16.isEmpty();
        boolean var30 = var16.isEmpty();
        var16.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var33 = var16.get(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
    }
    
    public void test443() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test443");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        var10.add(0, (java.lang.Object) 100L);
        int var15 = var10.size();
        int var16 = var10.size();
        int var17 = var10.size();
        int var18 = var10.size();
        var10.remove(0);
        int var21 = var10.size();
        var10.removeAll();
        boolean var23 = var10.isEmpty();
        var4.add(0, (java.lang.Object) var10);
        boolean var25 = var10.isEmpty();
        int var26 = var10.size();
        boolean var27 = var10.isEmpty();
        var10.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
    }
    
    public void test444() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test444");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        int var8 = var0.size();
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
    }
    
    public void test445() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test445");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        boolean var8 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var11 = var10.isEmpty();
        boolean var12 = var10.isEmpty();
        var10.removeAll();
        boolean var14 = var10.isEmpty();
        var10.removeAll();
        boolean var16 = var10.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        var18.removeAll();
        int var22 = var18.size();
        boolean var23 = var18.isEmpty();
        var18.removeAll();
        var10.add(0, (java.lang.Object) var18);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        var27.remove(0);
        var27.removeAll();
        var18.add(0, (java.lang.Object) var27);
        var0.add(0, (java.lang.Object) var18);
        int var39 = var0.size();
        var0.removeAll();
        boolean var41 = var0.isEmpty();
        int var42 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
    }
    
    public void test446() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test446");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        int var14 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.add(0, (java.lang.Object) 100L);
        int var21 = var16.size();
        boolean var22 = var16.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var24.removeAll();
        boolean var26 = var24.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var28 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var29 = var28.size();
        var28.removeAll();
        var28.removeAll();
        var24.add(0, (java.lang.Object) var28);
        boolean var33 = var24.isEmpty();
        boolean var34 = var24.isEmpty();
        var16.add(1, (java.lang.Object) var34);
        int var36 = var16.size();
        var16.add(2, (java.lang.Object) '4');
        java.lang.Object var41 = var16.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var43 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var44 = var43.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var46 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var47 = var46.size();
        boolean var48 = var46.isEmpty();
        var43.add(0, (java.lang.Object) var46);
        int var50 = var43.size();
        int var51 = var43.size();
        var43.removeAll();
        var16.add(2, (java.lang.Object) var43);
        var43.removeAll();
        var43.removeAll();
        var43.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var43);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var41 + "' != '" + 100L + "'", var41.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 1);
        
    }
    
    public void test447() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test447");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        var0.removeAll();
        int var26 = var0.size();
        boolean var27 = var0.isEmpty();
        int var28 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var31 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
    }
    
    public void test448() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test448");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        int var11 = var0.size();
        boolean var12 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
    }
    
    public void test449() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test449");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        boolean var31 = var0.isEmpty();
        var0.remove(0);
        int var34 = var0.size();
        int var35 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        boolean var39 = var37.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        boolean var44 = var41.isEmpty();
        boolean var45 = var41.isEmpty();
        var37.add(0, (java.lang.Object) var45);
        boolean var47 = var37.isEmpty();
        var37.removeAll();
        int var49 = var37.size();
        var37.removeAll();
        var37.removeAll();
        var37.removeAll();
        boolean var53 = var37.isEmpty();
        var0.add(1, (java.lang.Object) var53);
        var0.remove(1);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var58 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);
        
    }
    
    public void test450() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test450");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var14);
        int var28 = var0.size();
        int var29 = var0.size();
        int var30 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 2);
        
    }
    
    public void test451() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test451");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        java.lang.Object var24 = var3.get(0);
        int var25 = var3.size();
        boolean var26 = var3.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var28 = var3.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
    }
    
    public void test452() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test452");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        int var5 = var0.size();
        int var6 = var0.size();
        var0.removeAll();
        int var8 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test453() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test453");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        var3.removeAll();
        boolean var20 = var3.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var22 = var3.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
    }
    
    public void test454() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test454");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        boolean var14 = var0.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
    }
    
    public void test455() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test455");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        var0.remove(0);
        int var11 = var0.size();
        var0.removeAll();
        boolean var13 = var0.isEmpty();
        int var14 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        var17.removeAll();
        int var20 = var17.size();
        var17.removeAll();
        boolean var22 = var17.isEmpty();
        boolean var23 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        var25.removeAll();
        int var28 = var25.size();
        var25.removeAll();
        var25.add(0, (java.lang.Object) 100L);
        int var33 = var25.size();
        var25.removeAll();
        int var35 = var25.size();
        var17.add(0, (java.lang.Object) var35);
        boolean var37 = var17.isEmpty();
        boolean var38 = var17.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add((-1), (java.lang.Object) var38);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
    }
    
    public void test456() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test456");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(1);
        int var31 = var0.size();
        boolean var32 = var0.isEmpty();
        boolean var33 = var0.isEmpty();
        java.lang.Object var35 = var0.get(1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + true + "'", var35.equals(true));
        
    }
    
    public void test457() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test457");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        int var5 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        boolean var10 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.add(0, (java.lang.Object) 100L);
        int var17 = var12.size();
        int var18 = var12.size();
        int var19 = var12.size();
        var12.removeAll();
        boolean var21 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        boolean var28 = var26.isEmpty();
        var23.add(0, (java.lang.Object) var26);
        var26.add(0, (java.lang.Object) (-1.0d));
        var26.removeAll();
        boolean var34 = var26.isEmpty();
        int var35 = var26.size();
        boolean var36 = var26.isEmpty();
        boolean var37 = var26.isEmpty();
        int var38 = var26.size();
        int var39 = var26.size();
        int var40 = var26.size();
        var26.removeAll();
        boolean var42 = var26.isEmpty();
        var12.add(0, (java.lang.Object) var26);
        int var44 = var26.size();
        var0.add(0, (java.lang.Object) var26);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
    }
    
    public void test458() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test458");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        boolean var16 = var13.isEmpty();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        var13.removeAll();
        var13.removeAll();
        int var22 = var13.size();
        int var23 = var13.size();
        int var24 = var13.size();
        boolean var25 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        var13.removeAll();
        boolean var28 = var13.isEmpty();
        int var29 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var31.removeAll();
        boolean var33 = var31.isEmpty();
        int var34 = var31.size();
        var31.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        boolean var39 = var37.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        boolean var44 = var41.isEmpty();
        boolean var45 = var41.isEmpty();
        var37.add(0, (java.lang.Object) var45);
        var31.add(0, (java.lang.Object) var37);
        ar.verificacion.validacion.treelistimplementation.TreeList var49 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var50 = var49.size();
        var49.add(0, (java.lang.Object) 100L);
        int var54 = var49.size();
        boolean var55 = var49.isEmpty();
        boolean var56 = var49.isEmpty();
        var49.remove(0);
        var49.removeAll();
        var37.add(1, (java.lang.Object) var49);
        var13.add(0, (java.lang.Object) var37);
        boolean var62 = var37.isEmpty();
        boolean var63 = var37.isEmpty();
        int var64 = var37.size();
        var37.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var67 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var68 = var67.size();
        boolean var69 = var67.isEmpty();
        boolean var70 = var67.isEmpty();
        boolean var71 = var67.isEmpty();
        boolean var72 = var67.isEmpty();
        boolean var73 = var67.isEmpty();
        int var74 = var67.size();
        boolean var75 = var67.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var37.add(2, (java.lang.Object) var75);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == true);
        
    }
    
    public void test459() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test459");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        int var10 = var0.size();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        boolean var16 = var13.isEmpty();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        var13.removeAll();
        var13.removeAll();
        int var22 = var13.size();
        int var23 = var13.size();
        int var24 = var13.size();
        boolean var25 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var13);
        var13.removeAll();
        boolean var28 = var13.isEmpty();
        boolean var29 = var13.isEmpty();
        int var30 = var13.size();
        int var31 = var13.size();
        int var32 = var13.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
    }
    
    public void test460() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test460");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        boolean var14 = var12.isEmpty();
        boolean var15 = var12.isEmpty();
        boolean var16 = var12.isEmpty();
        var8.add(0, (java.lang.Object) var16);
        boolean var18 = var8.isEmpty();
        java.lang.Object var20 = var8.get(0);
        var8.remove(0);
        boolean var23 = var8.isEmpty();
        var0.add(0, (java.lang.Object) var23);
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        int var29 = var26.size();
        var26.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        boolean var34 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var36 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var37 = var36.size();
        boolean var38 = var36.isEmpty();
        boolean var39 = var36.isEmpty();
        boolean var40 = var36.isEmpty();
        var32.add(0, (java.lang.Object) var40);
        var26.add(0, (java.lang.Object) var32);
        var26.removeAll();
        var26.removeAll();
        var26.removeAll();
        var0.add(0, (java.lang.Object) var26);
        java.lang.Object var48 = var0.get(0);
        var0.removeAll();
        boolean var50 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        var52.add(0, (java.lang.Object) 100L);
        int var57 = var52.size();
        int var58 = var52.size();
        java.lang.Object var60 = var52.get(0);
        boolean var61 = var52.isEmpty();
        boolean var62 = var52.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var64 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var65 = var64.size();
        var64.add(0, (java.lang.Object) 100L);
        boolean var69 = var64.isEmpty();
        var64.removeAll();
        var52.add(0, (java.lang.Object) var64);
        int var72 = var52.size();
        int var73 = var52.size();
        var52.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var52);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + true + "'", var20.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var60 + "' != '" + 100L + "'", var60.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var61 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == 2);
        
    }
    
    public void test461() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test461");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.remove(0);
        int var16 = var0.size();
        boolean var17 = var0.isEmpty();
        int var18 = var0.size();
        int var19 = var0.size();
        boolean var20 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        int var25 = var22.size();
        var22.removeAll();
        boolean var27 = var22.isEmpty();
        boolean var28 = var22.isEmpty();
        int var29 = var22.size();
        var22.removeAll();
        var22.removeAll();
        int var32 = var22.size();
        int var33 = var22.size();
        var0.add(0, (java.lang.Object) var22);
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
    }
    
    public void test462() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test462");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        boolean var5 = var0.isEmpty();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        int var9 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
    }
    
    public void test463() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test463");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) (byte) 1);
        int var8 = var0.size();
        int var9 = var0.size();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        boolean var18 = var16.isEmpty();
        var13.add(0, (java.lang.Object) var16);
        var16.add(0, (java.lang.Object) (-1.0d));
        var16.removeAll();
        boolean var24 = var16.isEmpty();
        var16.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        var27.add(0, (java.lang.Object) 100L);
        int var32 = var27.size();
        int var33 = var27.size();
        int var34 = var27.size();
        int var35 = var27.size();
        var27.remove(0);
        int var38 = var27.size();
        int var39 = var27.size();
        var16.add(0, (java.lang.Object) var39);
        int var41 = var16.size();
        int var42 = var16.size();
        boolean var43 = var16.isEmpty();
        int var44 = var16.size();
        boolean var45 = var16.isEmpty();
        var16.removeAll();
        var0.add(0, (java.lang.Object) var16);
        boolean var48 = var16.isEmpty();
        var16.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var51 = var16.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
    }
    
    public void test464() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test464");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var9 = var0.size();
        int var10 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        int var15 = var12.size();
        var12.removeAll();
        boolean var17 = var12.isEmpty();
        var12.removeAll();
        var12.removeAll();
        boolean var20 = var12.isEmpty();
        int var21 = var12.size();
        boolean var22 = var12.isEmpty();
        var0.add(0, (java.lang.Object) var22);
        boolean var24 = var0.isEmpty();
        int var25 = var0.size();
        int var26 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var28 = var0.get(4);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 1);
        
    }
    
    public void test465() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test465");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        int var7 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var9 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var9.removeAll();
        boolean var11 = var9.isEmpty();
        int var12 = var9.size();
        var9.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        boolean var22 = var20.isEmpty();
        var17.add(0, (java.lang.Object) var20);
        var20.add(0, (java.lang.Object) (-1.0d));
        var20.removeAll();
        boolean var28 = var20.isEmpty();
        int var29 = var20.size();
        boolean var30 = var20.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var33 = var32.isEmpty();
        var32.removeAll();
        var20.add(0, (java.lang.Object) var32);
        var32.removeAll();
        var9.add(0, (java.lang.Object) var32);
        var0.add(1, (java.lang.Object) var9);
        int var39 = var9.size();
        var9.removeAll();
        boolean var41 = var9.isEmpty();
        var9.removeAll();
        int var43 = var9.size();
        boolean var44 = var9.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
    }
    
    public void test466() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test466");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        var15.removeAll();
        var3.add(0, (java.lang.Object) var15);
        int var19 = var3.size();
        boolean var20 = var3.isEmpty();
        boolean var21 = var3.isEmpty();
        var3.removeAll();
        var3.removeAll();
        var3.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
    }
    
    public void test467() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test467");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        int var7 = var0.size();
        int var8 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var10 = var0.get(2);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
    }
    
    public void test468() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test468");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.add(1, (java.lang.Object) 1.0d);
        int var11 = var0.size();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        boolean var20 = var18.isEmpty();
        boolean var21 = var18.isEmpty();
        boolean var22 = var18.isEmpty();
        var14.add(0, (java.lang.Object) var22);
        boolean var24 = var14.isEmpty();
        var14.removeAll();
        boolean var26 = var14.isEmpty();
        int var27 = var14.size();
        var14.removeAll();
        var14.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var31.removeAll();
        boolean var33 = var31.isEmpty();
        int var34 = var31.size();
        var31.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var37 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var38 = var37.size();
        boolean var39 = var37.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var41 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var42 = var41.size();
        boolean var43 = var41.isEmpty();
        boolean var44 = var41.isEmpty();
        boolean var45 = var41.isEmpty();
        var37.add(0, (java.lang.Object) var45);
        var31.add(0, (java.lang.Object) var37);
        int var48 = var37.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var50 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var51 = var50.size();
        boolean var52 = var50.isEmpty();
        var50.removeAll();
        int var54 = var50.size();
        boolean var55 = var50.isEmpty();
        boolean var56 = var50.isEmpty();
        boolean var57 = var50.isEmpty();
        var37.add(0, (java.lang.Object) var57);
        ar.verificacion.validacion.treelistimplementation.TreeList var60 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var60.removeAll();
        boolean var62 = var60.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var64 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var65 = var64.size();
        var64.removeAll();
        var64.removeAll();
        var60.add(0, (java.lang.Object) var64);
        boolean var69 = var60.isEmpty();
        boolean var70 = var60.isEmpty();
        boolean var71 = var60.isEmpty();
        var60.removeAll();
        var37.add(0, (java.lang.Object) var60);
        int var74 = var60.size();
        var60.removeAll();
        var14.add(0, (java.lang.Object) var60);
        boolean var77 = var14.isEmpty();
        int var78 = var14.size();
        boolean var79 = var14.isEmpty();
        var0.add(2, (java.lang.Object) var14);
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var78 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == false);
        
    }
    
    public void test469() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test469");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var3.size();
        boolean var8 = var3.isEmpty();
        boolean var9 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        var11.removeAll();
        int var14 = var11.size();
        var11.removeAll();
        int var16 = var11.size();
        var11.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(10, (java.lang.Object) var11);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
    }
    
    public void test470() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test470");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        int var4 = var0.size();
        int var5 = var0.size();
        var0.removeAll();
        int var7 = var0.size();
        var0.removeAll();
        var0.add(0, (java.lang.Object) true);
        int var12 = var0.size();
        boolean var13 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        boolean var17 = var15.isEmpty();
        var15.removeAll();
        boolean var19 = var15.isEmpty();
        var15.removeAll();
        boolean var21 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        var23.removeAll();
        int var27 = var23.size();
        boolean var28 = var23.isEmpty();
        var23.removeAll();
        var15.add(0, (java.lang.Object) var23);
        boolean var31 = var15.isEmpty();
        boolean var32 = var15.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(4, (java.lang.Object) var15);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);
        
    }
    
    public void test471() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test471");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        boolean var7 = var0.isEmpty();
        var0.remove(0);
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var17 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var18 = var17.size();
        boolean var19 = var17.isEmpty();
        var14.add(0, (java.lang.Object) var17);
        var17.add(0, (java.lang.Object) (-1.0d));
        boolean var24 = var17.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var26.removeAll();
        boolean var28 = var26.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        var30.removeAll();
        var30.removeAll();
        var26.add(0, (java.lang.Object) var30);
        var30.removeAll();
        var17.add(0, (java.lang.Object) var30);
        boolean var37 = var17.isEmpty();
        var0.add(0, (java.lang.Object) var17);
        int var39 = var0.size();
        int var40 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
    }
    
    public void test472() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test472");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        java.lang.Object var9 = var0.get(0);
        int var10 = var0.size();
        int var11 = var0.size();
        int var12 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        boolean var17 = var14.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var19.removeAll();
        boolean var21 = var19.isEmpty();
        int var22 = var19.size();
        var19.add(0, (java.lang.Object) 1L);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        var30.add(0, (java.lang.Object) (-1.0d));
        var30.removeAll();
        boolean var38 = var30.isEmpty();
        int var39 = var30.size();
        boolean var40 = var30.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var43 = var42.isEmpty();
        var42.removeAll();
        var30.add(0, (java.lang.Object) var42);
        var42.removeAll();
        var19.add(0, (java.lang.Object) var42);
        var14.add(0, (java.lang.Object) var19);
        java.lang.Object var50 = var19.get(1);
        var19.add(1, (java.lang.Object) 100.0f);
        java.lang.Object var55 = var19.get(1);
        var0.add(0, (java.lang.Object) var19);
        boolean var57 = var19.isEmpty();
        boolean var58 = var19.isEmpty();
        boolean var59 = var19.isEmpty();
        int var60 = var19.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + 100L + "'", var9.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var50 + "' != '" + 1L + "'", var50.equals(1L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var55 + "' != '" + 100.0f + "'", var55.equals(100.0f));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 3);
        
    }
    
    public void test473() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test473");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        var3.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        var14.add(0, (java.lang.Object) 100L);
        int var19 = var14.size();
        int var20 = var14.size();
        int var21 = var14.size();
        int var22 = var14.size();
        var14.remove(0);
        int var25 = var14.size();
        int var26 = var14.size();
        var3.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var30 = var29.size();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        boolean var35 = var33.isEmpty();
        boolean var36 = var33.isEmpty();
        boolean var37 = var33.isEmpty();
        var29.add(0, (java.lang.Object) var37);
        boolean var39 = var29.isEmpty();
        java.lang.Object var41 = var29.get(0);
        var29.remove(0);
        int var44 = var29.size();
        int var45 = var29.size();
        var3.add(0, (java.lang.Object) var29);
        boolean var47 = var3.isEmpty();
        var3.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var41 + "' != '" + true + "'", var41.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);
        
    }
    
    public void test474() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test474");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        int var4 = var0.size();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
    }
    
    public void test475() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test475");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var9 = var8.size();
        boolean var10 = var8.isEmpty();
        var8.removeAll();
        var8.removeAll();
        int var13 = var8.size();
        var8.removeAll();
        var8.removeAll();
        boolean var16 = var8.isEmpty();
        var0.add(0, (java.lang.Object) var16);
        boolean var18 = var0.isEmpty();
        int var19 = var0.size();
        boolean var20 = var0.isEmpty();
        int var21 = var0.size();
        var0.removeAll();
        int var23 = var0.size();
        int var24 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
    }
    
    public void test476() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test476");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 0L);
        int var9 = var0.size();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        var0.removeAll();
        boolean var13 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
    }
    
    public void test477() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test477");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        int var13 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var16 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test478() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test478");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.removeAll();
        int var3 = var0.size();
        var0.removeAll();
        var0.removeAll();
        boolean var6 = var0.isEmpty();
        var0.removeAll();
        int var8 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        boolean var15 = var10.isEmpty();
        int var16 = var10.size();
        boolean var17 = var10.isEmpty();
        int var18 = var10.size();
        boolean var19 = var10.isEmpty();
        var10.removeAll();
        var10.removeAll();
        boolean var22 = var10.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var25 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var26 = var25.size();
        var25.removeAll();
        var25.removeAll();
        boolean var29 = var25.isEmpty();
        int var30 = var25.size();
        int var31 = var25.size();
        boolean var32 = var25.isEmpty();
        var25.removeAll();
        var0.add(1, (java.lang.Object) var25);
        int var35 = var25.size();
        int var36 = var25.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var38 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var38.removeAll();
        boolean var40 = var38.isEmpty();
        int var41 = var38.size();
        var38.removeAll();
        int var43 = var38.size();
        boolean var44 = var38.isEmpty();
        var38.removeAll();
        int var46 = var38.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var48 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var49 = var48.size();
        boolean var50 = var48.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var52 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var53 = var52.size();
        boolean var54 = var52.isEmpty();
        boolean var55 = var52.isEmpty();
        boolean var56 = var52.isEmpty();
        var48.add(0, (java.lang.Object) var56);
        boolean var58 = var48.isEmpty();
        var48.removeAll();
        boolean var60 = var48.isEmpty();
        var38.add(0, (java.lang.Object) var48);
        boolean var62 = var38.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var25.add(100, (java.lang.Object) var62);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == false);
        
    }
    
    public void test479() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test479");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        boolean var10 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var12.removeAll();
        boolean var14 = var12.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var16 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var17 = var16.size();
        var16.removeAll();
        var16.removeAll();
        var12.add(0, (java.lang.Object) var16);
        var16.removeAll();
        var3.add(0, (java.lang.Object) var16);
        ar.verificacion.validacion.treelistimplementation.TreeList var24 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var25 = var24.size();
        var24.add(0, (java.lang.Object) 100L);
        int var29 = var24.size();
        int var30 = var24.size();
        var24.removeAll();
        int var32 = var24.size();
        var24.removeAll();
        int var34 = var24.size();
        var24.removeAll();
        var24.removeAll();
        var3.add(2, (java.lang.Object) var24);
        int var38 = var3.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        boolean var43 = var40.isEmpty();
        boolean var44 = var40.isEmpty();
        var40.removeAll();
        var3.add(0, (java.lang.Object) var40);
        int var47 = var3.size();
        var3.remove(1);
        boolean var50 = var3.isEmpty();
        var3.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var53 = var3.get(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 4);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
    }
    
    public void test480() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test480");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var1 = var0.isEmpty();
        boolean var2 = var0.isEmpty();
        var0.removeAll();
        var0.add(0, (java.lang.Object) 1.0d);
        int var7 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        boolean var15 = var13.isEmpty();
        var10.add(0, (java.lang.Object) var13);
        var13.add(0, (java.lang.Object) (-1.0d));
        boolean var20 = var13.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var26 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var27 = var26.size();
        var26.removeAll();
        var26.removeAll();
        var22.add(0, (java.lang.Object) var26);
        var26.removeAll();
        var13.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var34 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var35 = var34.size();
        boolean var36 = var34.isEmpty();
        var34.removeAll();
        int var38 = var34.size();
        boolean var39 = var34.isEmpty();
        var26.add(0, (java.lang.Object) var34);
        boolean var41 = var34.isEmpty();
        var0.add(0, (java.lang.Object) var34);
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var45 = var0.get(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);
        
    }
    
    public void test481() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test481");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        var0.remove(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        boolean var38 = var32.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var40 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var41 = var40.size();
        boolean var42 = var40.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var44 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var45 = var44.size();
        boolean var46 = var44.isEmpty();
        boolean var47 = var44.isEmpty();
        boolean var48 = var44.isEmpty();
        var40.add(0, (java.lang.Object) var48);
        boolean var50 = var40.isEmpty();
        var40.removeAll();
        boolean var52 = var40.isEmpty();
        var32.add(1, (java.lang.Object) var40);
        var32.removeAll();
        var0.add(2, (java.lang.Object) var32);
        var32.removeAll();
        boolean var57 = var32.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
    }
    
    public void test482() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test482");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        var0.add(0, (java.lang.Object) 'a');
        int var28 = var0.size();
        java.lang.Object var30 = var0.get(2);
        ar.verificacion.validacion.treelistimplementation.TreeList var32 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var33 = var32.size();
        var32.add(0, (java.lang.Object) 100L);
        int var37 = var32.size();
        int var38 = var32.size();
        int var39 = var32.size();
        int var40 = var32.size();
        var32.remove(0);
        int var43 = var32.size();
        boolean var44 = var32.isEmpty();
        var32.removeAll();
        boolean var46 = var32.isEmpty();
        int var47 = var32.size();
        int var48 = var32.size();
        int var49 = var32.size();
        int var50 = var32.size();
        var0.add(1, (java.lang.Object) var50);
        ar.verificacion.validacion.treelistimplementation.TreeList var53 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var54 = var53.isEmpty();
        boolean var55 = var53.isEmpty();
        var53.removeAll();
        var53.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var59 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var60 = var59.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var62 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var63 = var62.size();
        boolean var64 = var62.isEmpty();
        var59.add(0, (java.lang.Object) var62);
        var62.add(0, (java.lang.Object) (-1.0d));
        boolean var69 = var62.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var71 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var71.removeAll();
        boolean var73 = var71.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var75 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var76 = var75.size();
        var75.removeAll();
        var75.removeAll();
        var71.add(0, (java.lang.Object) var75);
        var75.removeAll();
        var62.add(0, (java.lang.Object) var75);
        ar.verificacion.validacion.treelistimplementation.TreeList var83 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var84 = var83.size();
        boolean var85 = var83.isEmpty();
        var83.removeAll();
        int var87 = var83.size();
        boolean var88 = var83.isEmpty();
        var75.add(0, (java.lang.Object) var83);
        int var90 = var75.size();
        var53.add(0, (java.lang.Object) var75);
        boolean var92 = var75.isEmpty();
        int var93 = var75.size();
        boolean var94 = var75.isEmpty();
        boolean var95 = var75.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(5, (java.lang.Object) var75);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var30 + "' != '" + true + "'", var30.equals(true));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var84 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var88 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var90 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var92 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var93 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var94 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var95 == false);
        
    }
    
    public void test483() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test483");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var13.removeAll();
        boolean var15 = var13.isEmpty();
        int var16 = var13.size();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        boolean var20 = var13.isEmpty();
        boolean var21 = var13.isEmpty();
        int var22 = var13.size();
        var0.add(0, (java.lang.Object) var22);
        int var24 = var0.size();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var27 = var0.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 2);
        
    }
    
    public void test484() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test484");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        boolean var14 = var3.isEmpty();
        int var15 = var3.size();
        int var16 = var3.size();
        int var17 = var3.size();
        boolean var18 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var20 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var21 = var20.size();
        var20.add(0, (java.lang.Object) 100L);
        int var25 = var20.size();
        boolean var26 = var20.isEmpty();
        int var27 = var20.size();
        int var28 = var20.size();
        int var29 = var20.size();
        int var30 = var20.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var3.add(1, (java.lang.Object) var20);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 1);
        
    }
    
    public void test485() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test485");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        java.lang.Object var8 = var0.get(0);
        var0.remove(0);
        var0.removeAll();
        boolean var12 = var0.isEmpty();
        boolean var13 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        boolean var16 = var15.isEmpty();
        boolean var17 = var15.isEmpty();
        var15.removeAll();
        boolean var19 = var15.isEmpty();
        var15.removeAll();
        boolean var21 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var23 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var24 = var23.size();
        boolean var25 = var23.isEmpty();
        var23.removeAll();
        int var27 = var23.size();
        boolean var28 = var23.isEmpty();
        var23.removeAll();
        var15.add(0, (java.lang.Object) var23);
        java.lang.Object var32 = var15.get(0);
        var15.removeAll();
        int var34 = var15.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.add(3, (java.lang.Object) var15);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var8 + "' != '" + 100L + "'", var8.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
    }
    
    public void test486() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test486");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var3.add(0, (java.lang.Object) (-1.0d));
        var3.removeAll();
        boolean var11 = var3.isEmpty();
        int var12 = var3.size();
        boolean var13 = var3.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        var3.add(0, (java.lang.Object) var19);
        var19.removeAll();
        boolean var26 = var19.isEmpty();
        boolean var27 = var19.isEmpty();
        var19.removeAll();
        boolean var29 = var19.isEmpty();
        boolean var30 = var19.isEmpty();
        int var31 = var19.size();
        boolean var32 = var19.isEmpty();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
    }
    
    public void test487() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test487");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        boolean var24 = var15.isEmpty();
        boolean var25 = var15.isEmpty();
        boolean var26 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        var15.removeAll();
        var15.removeAll();
        var15.removeAll();
        boolean var32 = var15.isEmpty();
        boolean var33 = var15.isEmpty();
        boolean var34 = var15.isEmpty();
        var15.removeAll();
        int var36 = var15.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);
        
    }
    
    public void test488() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test488");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        ar.verificacion.validacion.treelistimplementation.TreeList var18 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var19 = var18.size();
        var18.add(0, (java.lang.Object) 100L);
        int var23 = var18.size();
        boolean var24 = var18.isEmpty();
        boolean var25 = var18.isEmpty();
        var18.remove(0);
        var18.removeAll();
        var6.add(1, (java.lang.Object) var18);
        var6.removeAll();
        var6.removeAll();
        int var32 = var6.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var6.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
    }
    
    public void test489() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test489");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        var4.removeAll();
        var4.removeAll();
        var0.add(0, (java.lang.Object) var4);
        boolean var9 = var0.isEmpty();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var13.removeAll();
        boolean var15 = var13.isEmpty();
        int var16 = var13.size();
        boolean var17 = var13.isEmpty();
        boolean var18 = var13.isEmpty();
        var13.removeAll();
        boolean var20 = var13.isEmpty();
        boolean var21 = var13.isEmpty();
        int var22 = var13.size();
        var0.add(0, (java.lang.Object) var22);
        var0.remove(1);
        int var26 = var0.size();
        var0.removeAll();
        var0.removeAll();
        int var29 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
    }
    
    public void test490() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test490");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        var0.add(2, (java.lang.Object) '4');
        java.lang.Object var25 = var0.get(0);
        ar.verificacion.validacion.treelistimplementation.TreeList var27 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var28 = var27.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var30 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var31 = var30.size();
        boolean var32 = var30.isEmpty();
        var27.add(0, (java.lang.Object) var30);
        int var34 = var27.size();
        int var35 = var27.size();
        var27.removeAll();
        var0.add(2, (java.lang.Object) var27);
        var0.remove(2);
        int var40 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var42 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var43 = var42.size();
        var42.removeAll();
        int var45 = var42.size();
        boolean var46 = var42.isEmpty();
        int var47 = var42.size();
        int var48 = var42.size();
        int var49 = var42.size();
        int var50 = var42.size();
        int var51 = var42.size();
        var0.add(0, (java.lang.Object) var42);
        ar.verificacion.validacion.treelistimplementation.TreeList var54 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var55 = var54.size();
        boolean var56 = var54.isEmpty();
        boolean var57 = var54.isEmpty();
        boolean var58 = var54.isEmpty();
        boolean var59 = var54.isEmpty();
        var54.removeAll();
        var54.removeAll();
        var54.removeAll();
        boolean var63 = var54.isEmpty();
        var54.removeAll();
        var0.add(2, (java.lang.Object) var54);
        var54.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var54.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + 100L + "'", var25.equals(100L));
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 3);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);
        
    }
    
    public void test491() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test491");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        var0.remove(0);
        var0.removeAll();
        boolean var10 = var0.isEmpty();
        int var11 = var0.size();
        int var12 = var0.size();
        int var13 = var0.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
    }
    
    public void test492() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test492");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        boolean var6 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var8 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var8.removeAll();
        boolean var10 = var8.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var12 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var13 = var12.size();
        var12.removeAll();
        var12.removeAll();
        var8.add(0, (java.lang.Object) var12);
        boolean var17 = var8.isEmpty();
        boolean var18 = var8.isEmpty();
        var0.add(1, (java.lang.Object) var18);
        int var20 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var22 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var22.removeAll();
        boolean var24 = var22.isEmpty();
        int var25 = var22.size();
        boolean var26 = var22.isEmpty();
        int var27 = var22.size();
        boolean var28 = var22.isEmpty();
        var0.add(1, (java.lang.Object) var22);
        int var30 = var22.size();
        boolean var31 = var22.isEmpty();
        var22.removeAll();
        var22.removeAll();
        int var34 = var22.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
    }
    
    public void test493() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test493");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        var0.removeAll();
        int var6 = var0.size();
        var0.removeAll();
        boolean var8 = var0.isEmpty();
        boolean var9 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        boolean var13 = var11.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var16 = var15.size();
        boolean var17 = var15.isEmpty();
        boolean var18 = var15.isEmpty();
        boolean var19 = var15.isEmpty();
        var11.add(0, (java.lang.Object) var19);
        boolean var21 = var11.isEmpty();
        var11.removeAll();
        var11.removeAll();
        var0.add(0, (java.lang.Object) var11);
        var11.removeAll();
        var11.removeAll();
        boolean var27 = var11.isEmpty();
        var11.removeAll();
        int var29 = var11.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var31 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var32 = var31.size();
        var31.removeAll();
        int var34 = var31.size();
        boolean var35 = var31.isEmpty();
        var31.removeAll();
        var31.removeAll();
        int var38 = var31.size();
        int var39 = var31.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var11.add(1, (java.lang.Object) var31);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 0);
        
    }
    
    public void test494() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test494");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        var0.add(0, (java.lang.Object) 100L);
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        var0.removeAll();
        int var9 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var11 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var12 = var11.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var14 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var15 = var14.size();
        boolean var16 = var14.isEmpty();
        var11.add(0, (java.lang.Object) var14);
        var14.add(0, (java.lang.Object) (-1.0d));
        var14.removeAll();
        boolean var22 = var14.isEmpty();
        int var23 = var14.size();
        var14.removeAll();
        boolean var25 = var14.isEmpty();
        var0.add(0, (java.lang.Object) var14);
        int var27 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 1);
        
    }
    
    public void test495() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test495");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var6 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var7 = var6.size();
        boolean var8 = var6.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var10 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var11 = var10.size();
        boolean var12 = var10.isEmpty();
        boolean var13 = var10.isEmpty();
        boolean var14 = var10.isEmpty();
        var6.add(0, (java.lang.Object) var14);
        var0.add(0, (java.lang.Object) var6);
        int var17 = var6.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        boolean var21 = var19.isEmpty();
        var19.removeAll();
        int var23 = var19.size();
        boolean var24 = var19.isEmpty();
        boolean var25 = var19.isEmpty();
        boolean var26 = var19.isEmpty();
        var6.add(0, (java.lang.Object) var26);
        ar.verificacion.validacion.treelistimplementation.TreeList var29 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var29.removeAll();
        boolean var31 = var29.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var33 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var34 = var33.size();
        var33.removeAll();
        var33.removeAll();
        var29.add(0, (java.lang.Object) var33);
        boolean var38 = var29.isEmpty();
        boolean var39 = var29.isEmpty();
        boolean var40 = var29.isEmpty();
        var29.removeAll();
        var6.add(0, (java.lang.Object) var29);
        var6.remove(2);
        var6.removeAll();
        boolean var46 = var6.isEmpty();
        boolean var47 = var6.isEmpty();
        boolean var48 = var6.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var50 = var6.get((-1));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);
        
    }
    
    public void test496() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test496");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        boolean var3 = var0.isEmpty();
        boolean var4 = var0.isEmpty();
        boolean var5 = var0.isEmpty();
        int var6 = var0.size();
        boolean var7 = var0.isEmpty();
        int var8 = var0.size();
        boolean var9 = var0.isEmpty();
        var0.removeAll();
        boolean var11 = var0.isEmpty();
        boolean var12 = var0.isEmpty();
        var0.removeAll();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(3);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);
        
    }
    
    public void test497() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test497");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        boolean var5 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var3);
        int var7 = var3.size();
        boolean var8 = var3.isEmpty();
        var3.removeAll();
        var3.removeAll();
        int var11 = var3.size();
        var3.removeAll();
        var3.removeAll();
        int var14 = var3.size();
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
    }
    
    public void test498() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test498");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var0.removeAll();
        boolean var2 = var0.isEmpty();
        int var3 = var0.size();
        var0.removeAll();
        int var5 = var0.size();
        int var6 = var0.size();
        int var7 = var0.size();
        boolean var8 = var0.isEmpty();
        int var9 = var0.size();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var11 = var0.get(0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);
        
    }
    
    public void test499() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test499");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        boolean var2 = var0.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var4 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var5 = var4.size();
        boolean var6 = var4.isEmpty();
        boolean var7 = var4.isEmpty();
        boolean var8 = var4.isEmpty();
        var0.add(0, (java.lang.Object) var8);
        boolean var10 = var0.isEmpty();
        var0.removeAll();
        int var12 = var0.size();
        var0.removeAll();
        ar.verificacion.validacion.treelistimplementation.TreeList var15 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        var15.removeAll();
        boolean var17 = var15.isEmpty();
        ar.verificacion.validacion.treelistimplementation.TreeList var19 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var20 = var19.size();
        var19.removeAll();
        var19.removeAll();
        var15.add(0, (java.lang.Object) var19);
        boolean var24 = var15.isEmpty();
        boolean var25 = var15.isEmpty();
        boolean var26 = var15.isEmpty();
        var15.removeAll();
        var0.add(0, (java.lang.Object) var15);
        var0.removeAll();
        boolean var30 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
    }
    
    public void test500() throws Throwable {
        
        if (debug)
            System.out.printf("%nRandoopTest28.test500");
        
        ar.verificacion.validacion.treelistimplementation.TreeList var0 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var1 = var0.size();
        ar.verificacion.validacion.treelistimplementation.TreeList var3 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var4 = var3.size();
        var3.add(0, (java.lang.Object) 100L);
        int var8 = var3.size();
        boolean var9 = var3.isEmpty();
        boolean var10 = var3.isEmpty();
        var0.add(0, (java.lang.Object) var10);
        ar.verificacion.validacion.treelistimplementation.TreeList var13 = new ar.verificacion.validacion.treelistimplementation.TreeList();
        int var14 = var13.size();
        var13.add(0, (java.lang.Object) 100L);
        int var18 = var13.size();
        int var19 = var13.size();
        int var20 = var13.size();
        var13.removeAll();
        boolean var22 = var13.isEmpty();
        boolean var23 = var13.isEmpty();
        var0.add(1, (java.lang.Object) var23);
        int var25 = var0.size();
        int var26 = var0.size();
        var0.removeAll();
        var0.removeAll();
        var0.removeAll();
        boolean var30 = var0.isEmpty();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var32 = var0.get(10);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 2);
        
        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);
        
    }
    
}
